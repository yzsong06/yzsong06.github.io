<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一只鬆の小站</title>
  
  <subtitle>心有多宽,世界就有多远</subtitle>
  <link href="https://blog.sotkg.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.sotkg.cn/"/>
  <updated>2023-10-11T00:45:32.764Z</updated>
  <id>https://blog.sotkg.cn/</id>
  
  <author>
    <name>一只鬆</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>静态博客提速计划：虚拟主机托管</title>
    <link href="https://blog.sotkg.cn/posts/4b4ee611.html"/>
    <id>https://blog.sotkg.cn/posts/4b4ee611.html</id>
    <published>2023-09-21T16:17:06.000Z</published>
    <updated>2023-10-11T00:45:32.764Z</updated>
    
    <content type="html"><![CDATA[<h2 id="契机">契机</h2><p>最近针对自己站点的规划做了全新的思考，最后决定准备在明年成年以后对个人站点做个备案，然后搬到国内服务托管，来让国内访问的速度提高，但在这之前，我们也要想点办法提高国内的访问速度。</p><h2 id="选择">选择</h2><p>理论上当然是香港的服务器托管比较好，但我作为一个学生估计是负担不起香港服务器的价格，这个时候我想起了虚拟主机，这是一种可以托管PHP或者ASP，当然也可以托管HTML页面。</p><p>而我们静态博客就比较符合这个定位，香港虚拟主机价格还是比较便宜的，我们能用买香港1c1g一个月的价格，买到N个月更高带宽的虚拟主机。</p><p>诚然，服务器能干更多的事情，但我们只需要托管静态博客，自然不需要服务器的更高级的功能。</p><p>说干就干，我用的静态博客框架是比较流行的Hexo，我们来看看有什么合适的方案。</p><h2 id="方案">方案</h2><p>我找到的方案是Hexo官方文档中写到的FTP同步法，因为虚拟主机本身是有FTP同步的，我们可以用这个来实现站点的同步。</p><p>安装 <code>hexo-deployer-ftpsync</code></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-ftpsync --save</span><br></pre></td></tr></table></figure></div><p>然后在站点 _config.yml 文件中添加并修改一下配置，具体操作可以参考官方文档 这里讲一下多种部署方式如何写，比如我现在用的 Git 与 FTP 同时部署 Hexo：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  - type: ftpsync</span><br><span class="line">    host: ftp.example.com #Ftp服务器链接</span><br><span class="line">    user: username #Ftp账号</span><br><span class="line">    pass: password #Ftp密码</span><br><span class="line">    remote: /wwwroot/hexo #远程主机文件根目录</span><br><span class="line">    port: 21 #Ftp端口</span><br><span class="line">    ignore:  #同步时忽略的文件</span><br><span class="line">    connections: 16 #同步时使用的连接数</span><br><span class="line">    verbose: false #是否显示调试信息</span><br></pre></td></tr></table></figure></div><p>注意每个 - 后面有一个空格，来区分不同的部署方式。</p><h2 id="问题">问题</h2><p>实际在部署时可能会遇到文件同步失败的问题，这个在Hexo官方文档中有解释：</p><blockquote><p>您可能需要预先通过其他方式将所有文件上传到远程主机中。否则初次使用ftpsync插件就可能出现报错。另外，由于FTP协议的特征，它每传送一个文件就需要一次握手，相对速度较慢。</p></blockquote><p>这也不难，我们把站点使用<code>hexo build</code>后产生的静态文件预先复制到主机的站点文件目录下就好，比如我是放在<code>wwwroot/hexo</code>下</p><h2 id="部署">部署</h2><p>都配置完成后，我们就可以使用Hexo的Deploy命令来查看效果</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></div><h2 id="效果">效果</h2><p>本站就是例子（Doge）</p>]]></content>
    
    
    <summary type="html">最近针对自己站点的规划做了全新的思考，最后决定准备在明年成年以后对个人站点做个备案，然后搬到国内服务托管，来让国内访问的速度提高，但在这之前，我们也要想点办法提高国内的访问速度</summary>
    
    
    
    <category term="建站思路" scheme="https://blog.sotkg.cn/categories/%E5%BB%BA%E7%AB%99%E6%80%9D%E8%B7%AF/"/>
    
    
    <category term="博客" scheme="https://blog.sotkg.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="虚拟主机" scheme="https://blog.sotkg.cn/tags/%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>轻量但不简单：Cusdis评论系统部署</title>
    <link href="https://blog.sotkg.cn/posts/32ba7419.html"/>
    <id>https://blog.sotkg.cn/posts/32ba7419.html</id>
    <published>2023-09-20T03:58:23.000Z</published>
    <updated>2023-09-20T12:23:40.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在建设自己的博客的时候，大多数时候我们需要一个评论系统；当然，如果你用的是WordPress，Typecho的话，你不需要去鼓捣这些，一般现在动态博客都自带评论系统，但如果我们是部署的静态博客，这时候就需要我们选择一个评论系统了，因为静态一般是没有后端的。</p><h2 id="选择">选择</h2><p>现在其实有很多解决方案：</p><ul><li>Twikoo与Waline这类国内十分流行的评论系统解决方案</li><li>基于Git的评论系统，比如Gitalk,Giscus等等</li><li>由第三方服务提供的评论解决方案，比如Disqus,来必力等等</li></ul><p>事实上，我自己的博客用的也是Twikoo，他确实是一个优秀的自托管评论系统。<br>但以上这些，都不能满足我们今天想要的：轻量。</p><h2 id="开端">开端</h2><p>这时候，我在网上翻阅文章的时候偶然看到了Cusdis，它的出现可以说是为了替代<s>万恶的</s>Disqus评论系统。<br>Disqus作为一个商业化的评论系统，其免费版本具有以下问题：</p><ul><li>会收集用户隐私</li><li>国内无法使用（虽然有解决方案，但很慢）</li><li>免费版本经常会附带一些广告</li><li>数据不在我们自己的手中</li><li>我们并不能享受到作为个人站点评论系统该有的权益</li></ul><p>这时候Cusdis就作为取代Disqus的“救星”出现了。Cusdis 是一个注重数据隐私的开源的评论系统，十分轻量，经过 Gzipped 后大约只有5kb，我们从它的名字来看也知道开发者也是难以忍受 Disqus，自己做了一个替代版，因此它也是支持 Disqus 历史数据导入的，很贴心。</p><p>虽然这是一个仍处于开发早期的项目，但它已经提供了电子邮件通知以及通过 Webhook 联动 Telegram 等方式进行评论提醒，对使用者来说很方便进行管理。Cusdis 提供了免费托管服务与自行部署两种方式，自行部署需要服务器与一个 Postgre SQL 实例，我们在这里也是主要示范一下自行部署方式。</p><h2 id="选择-2">选择</h2><p>官方提到的部署方案里有Railway，诚然，它的确提供一定的免费额度，而且将数据库与项目整合在一起也是一个不错的设计，但其最近已经做了一次改动：针对未绑定信用卡的用户，Railway仅提供一次性的5美元免费额度。这就阻挡了很多没有信用卡的用户，比如我这个学生（弱），不过好在这是个Next.js应用，我们可以通过<s>Next.js的亲爹</s>Vercel来部署Cusdis评论服务。</p><h2 id="部署">部署</h2><p>在部署以前我们需要准备的：</p><ul><li>一个Vercel账号</li><li>一个域名（Vercel二级域名在国内无法访问）</li><li>一个Postgres数据库</li></ul><h3 id="数据库">数据库</h3><p>我们可以选择使用Vercel提供的免费数据库，其免费额度足以撑起个人站点的评论服务。<br><strong>Vercel数据库的计费政策：</strong></p><ul><li>免费用户，每月的计算时间 60 hours，存储 256 MB。</li><li>Pro 用户, 每月的计算时间 100 hours 存储 512 MB, 超出 1GB/$0.30 当达到此限制时，对数据库的请求将受到速率限制。</li></ul><p>总体来说还行，足够我们一个小站点的使用了。<br>数据库新建方法：打开Vercel仪表板，找到上方的<code>Storage</code>，进入后单击<code>Create Database</code>，然后选择<code>Postgres</code>，在点击<code>Continue</code>并选择地区后完成新建，在数据库设置里我们可以找到数据库的链接地址，其格式应类似于<code>postgresql://johndoe:randompassword@localhost:5432/mydb</code><br>准备好以上东西以后，我们就可以开始部署了，你可以通过下方按钮一键将其部署到Vercel<br><a href="https://vercel.com/new/git/external?repository-url=https%3A%2F%2Fgithub.com%2Fdjyde%2Fcusdis&amp;env=USERNAME,PASSWORD,DB_URL,JWT_SECRET&amp;envDescription=Environment%20variables%20reference&amp;envLink=https%3A%2F%2Fcusdis.com%2Fdoc"> <img                       lazyload                     src="/images/loading.svg"                     data-src="https://vercel.com/button"                      alt="Vercel一键部署"                > </a><br>我们需要设置环境变量<code>Environment Variable</code>，参考下表</p><table><thead><tr><th>变量名称</th><th>变量解释</th></tr></thead><tbody><tr><td><code>USERNAME</code></td><td>后台系统登录用户名</td></tr><tr><td><code>PASSWORD</code></td><td>后台系统登录密码</td></tr><tr><td><code>DB_URL</code></td><td>数据库连接地址</td></tr><tr><td><code>JWT_SECRET</code></td><td>JWT令牌密钥，设置任何内容都可以</td></tr><tr><td><code>NEXTAUTH_URL</code></td><td>设置你为其绑定的域名</td></tr></tbody></table><p>完成以上变量设置后，我们就可以单击<code>Deploy</code>进行部署。</p><h2 id="仪表盘">仪表盘</h2><p>部署完成后，单击我们为其绑定的链接进入后台<br><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/CusdisDash.png"                      alt="仪表盘登录（图片来自于少数派）"                ></p><p>我们在此处输入部署前配置的用户名与密码，点击登录。登录完成后，点击 <code>Dashboard</code>，进入项目配置页面。</p><p>初次登录会弹窗提示需要配置第一个网站，输入网站名称即可完成添加。后续当我们需要添加网站时，点击侧边栏 <code>New Website</code>，填写网站名称即可完成添加。</p><p>前端集成，则需要参考Cusdis官方文档中的<code>SDK集成</code>部分将其集成到我们需要放置评论系统的站点中。</p><a class="link"   href="https://cusdis.com/doc#/advanced/sdk"  title="" target=""> <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><h2 id="效果">效果</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/CusdisDemo.png"                      alt="效果预览（图片来自于少数派）"                ></p>]]></content>
    
    
    <summary type="html">部署Cusdis评论系统</summary>
    
    
    
    <category term="建站思路" scheme="https://blog.sotkg.cn/categories/%E5%BB%BA%E7%AB%99%E6%80%9D%E8%B7%AF/"/>
    
    
    <category term="评论系统" scheme="https://blog.sotkg.cn/tags/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Vercel" scheme="https://blog.sotkg.cn/tags/Vercel/"/>
    
    <category term="Cusdis" scheme="https://blog.sotkg.cn/tags/Cusdis/"/>
    
  </entry>
  
  <entry>
    <title>Nextjs博客快速引入Waline评论系统</title>
    <link href="https://blog.sotkg.cn/posts/e0083458.html"/>
    <id>https://blog.sotkg.cn/posts/e0083458.html</id>
    <published>2023-09-14T02:10:10.000Z</published>
    <updated>2023-10-11T00:45:24.823Z</updated>
    
    <content type="html"><![CDATA[<p>之前我在研究Next.js博客时，发现它们很多缺少一个作为博客的基本的东西：评论，就算有，也是Gistus这类依赖于GitHub的评论系统，而在国内还是尽量选择一个无需登录的评论系统，于是我选择了Waline作为评论系统，在引入过程中遇到了一些坑，不过最后还是引入完成了。</p><h2 id="前言">前言</h2><p>如果你没有Waline后端，请先参考Waline官方文档部署一个</p><a class="link"   href="https://waline.js.org/"  title="" target=""> <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><h2 id="模板选择">模板选择</h2><p>我选择了Netlify的一个Next.js博客模板，虽然简朴，但是可以作为试验的一个地方。<br><a class="link"   href="https://github.com/netlify-templates/nextjs-blog-theme" >模板Github仓库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="引入Waline">引入Waline</h2><p>首先我们需要以包形式安装Waline。</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D @waline/client</span><br></pre></td></tr></table></figure></div><p>然后在博客根目录下，我们找到<code>components</code>文件夹，在里面新建一个JS组件，比如<code>Comment.js</code>。</p><p>然后在<code>Comment.js</code>中加入以下代码</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; init &#125; <span class="keyword">from</span> <span class="string">&#x27;@waline/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@waline/client/dist/waline.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">WalineComment</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">init</span>(&#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="string">&#x27;#waline&#x27;</span>,</span><br><span class="line">      <span class="attr">serverURL</span>: <span class="string">&#x27;https://你的Waline后端地址&#x27;</span>,</span><br><span class="line">      <span class="comment">// 此处可以配置更多配置，参考Waline官方文档...</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;waline&quot;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">WalineComment</span>;</span><br></pre></td></tr></table></figure></div><p>这样我们就建立了一个Js评论组件。</p><h2 id="引入页面">引入页面</h2><p>我们打开博客文件根目录，找到<code>pages/posts/[slug].js</code>这个文件，这个React组件负责渲染文章页面。<br>接下来在页头加入</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">WalineComment</span> <span class="keyword">from</span> <span class="string">&#x27;../../components/Comment&#x27;</span>;</span><br></pre></td></tr></table></figure></div><p>然后我们在需要加入Waline评论系统的地方引入容器</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Waline评论系统</span></span><br><span class="line">&lt;<span class="title class_">WalineComment</span> /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;waline&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div><p>比如我是在这里加入代码（该文件约59至60行）</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;/header&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">article</span> <span class="attr">className</span>=<span class="string">&quot;prose dark:prose-dark&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">MDXRemote</span> &#123;<span class="attr">...source</span>&#125; <span class="attr">components</span>=<span class="string">&#123;components&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  //引入Waline评论系统</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">WalineComment</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;waline&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;grid md:grid-cols-2 lg:-mx-24 mt-12&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div><p>现在我们输入命令启动开发服务器查看效果</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></div><p>效果图（确保正确填写了Waline后端地址）：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/Nextjs_Waline.png"                      alt="效果图"                ></p><h2 id="个人示例仓库">个人示例仓库</h2><p><a class="link"   href="https://github.com/yzsong06/Test_NextJS" >https://github.com/yzsong06/Test_NextJS <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前我在研究Next.js博客时，发现它们很多缺少一个作为博客的基本的东西：评论，就算有，也是Gistus这类依赖于GitHub的评论系统，而在国内还是尽量选择一个无需登录的评论系统，于是我选择了Waline作为评论系统，在引入过程中遇到了一些坑，不过最后还是引入完成了。&lt;</summary>
      
    
    
    
    <category term="建站思路" scheme="https://blog.sotkg.cn/categories/%E5%BB%BA%E7%AB%99%E6%80%9D%E8%B7%AF/"/>
    
    
    <category term="博客" scheme="https://blog.sotkg.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Nextjs" scheme="https://blog.sotkg.cn/tags/Nextjs/"/>
    
    <category term="Waline" scheme="https://blog.sotkg.cn/tags/Waline/"/>
    
  </entry>
  
  <entry>
    <title>个人博客更换框架失败</title>
    <link href="https://blog.sotkg.cn/posts/78578257.html"/>
    <id>https://blog.sotkg.cn/posts/78578257.html</id>
    <published>2023-09-12T10:55:13.331Z</published>
    <updated>2023-10-11T00:46:20.671Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么失败了？">为什么失败了？</h2><p>在鼓捣新框架之前，我的博客一直用的是Hexo，今年9月，我萌生了更换框架的想法，在折腾了HTML（RTheme），Next.js，Hugo，Astro，Vue/VitePress之后，我只能说，不是人家不好，只是我不行。</p><h3 id="HTML">HTML</h3><p>它很好，快速且功能强大，但对于我来说排版HTML是件麻烦事，而且其繁重的工作极其启动时间让我无奈</p><h3 id="Next-js">Next.js</h3><p>Next.js，它很强大，也易用，而且拥有新的特性，比如mdx，但它对于我这个不熟悉React的渣渣来说，难以上手</p><h3 id="Hugo">Hugo</h3><p>基于Go构建，它快速，支持热重载，但对我来说，并不需要它的部分特性</p><h3 id="Astro">Astro</h3><p>作为目前可以说最快的前端框架，它特别快，但它出现时间不够长，对我来说用它构建站点绝对是件苦事</p><h3 id="Vue-Vite">Vue/Vite</h3><p>也很棒，但我用不来。</p><h2 id="后续更新计划">后续更新计划</h2><p>现在Hexo也更换主题了，目前使用Redefine，也是希望后期专注于写作，我也删除了九月水的两篇水分较大的文章，以后将会提高文章质量。也会尽量加快更新速度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么失败了？&quot;&gt;为什么失败了？&lt;/h2&gt;
&lt;p&gt;在鼓捣新框架之前，我的博客一直用的是Hexo，今年9月，我萌生了更换框架的想法，在折腾了HTML（RTheme），Next.js，Hugo，Astro，Vue/VitePress之后，我只能说，不是人家不好，只是我</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>RTheme配置边缘服务</title>
    <link href="https://blog.sotkg.cn/posts/aaea8e9b.html"/>
    <id>https://blog.sotkg.cn/posts/aaea8e9b.html</id>
    <published>2023-09-08T22:15:14.072Z</published>
    <updated>2023-10-11T00:44:45.545Z</updated>
    
    <content type="html"><![CDATA[  <div class="note p-4 mb-4 rounded-small danger">    <p>本文写于2023-09，适用于RThemeV3主题，请注意你的主题版本</p>  </div><h3 id="配置Twikoo评论服务">配置Twikoo评论服务</h3><p>这里其实作者文档写的并不算很难，只要你有一个Twikoo都能很快理解他写的意思。</p><p>没有Twikoo的请参考<a class="link"   href="https://twikoo.js.org" >官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>搭建一个</p>  <div class="note p-4 mb-4 rounded-small tip">    <p>主题默认情况下，Twikoo处于开启状态。</p>  </div><p>要使用Twikoo，只需要在<code>/asstes/js/display.js</code>中，修改函数<code>loadComment()</code>的定义，将其中包含的<code>envId: ''</code>(大概在第304行左右)修改为<code>envId: '这里填写你的envId'</code></p><p>上面函数的定义还是比较好找的，在主题文件目录下/assets/js/display.js，找到大概在下面这片区域（大约在304行左右）的代码，在这个<code>envId: ''</code>的单引号里面填写你的Twikoo后端服务的网址就可以了。</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 评论初始化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initComment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    twikoo</span><br><span class="line">        .<span class="title function_">init</span>(&#123;</span><br><span class="line">            <span class="comment">// 这里填写你的envId</span></span><br><span class="line">            <span class="attr">envId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">el</span>: <span class="string">&#x27;#tcomment&#x27;</span>,</span><br><span class="line">            <span class="attr">onCommentLoaded</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="title function_">addMessageBarQueue</span>(</span><br><span class="line">                    <span class="string">&#x27;&lt;a&gt;评论已加载 &lt;span class=&quot;i ri:chat-check-line&quot;&gt;&lt;/span&gt;&lt;/a&gt;&#x27;</span>,</span><br><span class="line">                    <span class="number">1000</span>,</span><br><span class="line">                );</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="Umami统计配置">Umami统计配置</h3><p>这里发Post请求（Umami官方文档获取token）难了我一下，不过其实还算能办。</p><p>首先我们要获取你的token，我们来看一下Umami的<a class="link"   href="https://umami.is/docs/authentication" >官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>关于发请求获取“你的token”，这里我个人的建议方案是找一个<a class="link"   href="http://coolaf.com/tool/post" >网页模拟请求服务 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>然后Umami官方文档中用的是Json来发送的请求，所以我们在这个网站要把模式切成<code>Raw</code>，格式是<code>json(application/json)</code>，然后我们看一下Umami官方文档写的：</p><blockquote><p>First you need to get a <em>token</em> in order to make API requests. You need to make a <code>POST</code> request to the <code>/api/auth/login</code> endpoint with the following data</p></blockquote><p>翻译过来是：</p><blockquote><p>首先，您需要获取令牌才能发出 API 请求。您需要使用以下数据向 <code>/api/auth/login</code> 终端节点发出 <code>POST</code> 请求</p></blockquote><p>这里首先先解释一下：你要发送到的节点地址其实就是<code>https://（Umami后端地址）/api/auth/login</code>，我们把这个链接填到网页工具上面的URL填写框里面。</p><p>下面Json填写</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的登录用户名&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的登录密码&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><p>填完以后点下“提交”，耐心等待一下，下面应该就BalaBala的出了数据，差不多应该是下面这个样子：</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asA5dIfE...Pm5y7YXeT53rKnWZZEPoKbQ5N8Sx2a99NuR7s/BWiqLOVA==（类似这样的token）&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;41680....e2b10c264（用户ID）&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的登录用户名&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;createdAt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;一串时间&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><p>这个<code>&quot;token&quot;:</code>右边冒号里的内容就是你的token，是不是学废了？</p><p>先别废，如果你这里就废了，那接下来更完蛋。</p><p>接下来要获取你的“共享token”，你需要一个能打开F12控制台的浏览器，我使用的是Chrome。<br>首先我们得打开你的Umami，然后找到站点设置里的“共享链接”，打开这个功能后，你会在下面得到一个链接，把这个链接复制到浏览器地址栏里然后打开它（建议用无痕式标签页模式），按下你键盘上的<code>F12</code>打开你的浏览器控制台，找到<code>网络</code>选项，这里应该会有一个文件列表（没有的话按一下<code>Ctrl+R</code>刷新页面），然后会有一个令人头疼的问题是：你去哪里找这个Token？<br>我个人给的办法是：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 切换筛选类型为`Fetch/XHR`，</span><br><span class="line">2. 然后随便点开里面一个文件，找到`标头`信息</span><br><span class="line">3. 翻到最下面，然后你就应该可以看到这个`x-umami-share-token`了，复制它的值（没有换一个文件看看）</span><br></pre></td></tr></table></figure></div><p>这样，你就得到了这个“共享Token”</p><p>如果你照着上面的教程都得到了，恭喜你！（鼓掌👏）你完成了关键的一步操作。</p><p>接下来主题作者说：</p><blockquote><p>之后，你需要部署你的路由转发服务来隐藏你的Token。</p></blockquote><p>你需要一个Vercel账号，还有一个域名（Vercel默认二级域名在中国大陆已被墙）</p><p><a class="link"   href="https://github.com/RavelloH/umami-api-route" >Umami API路由转发服务的Github仓库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>我们部署它，并且把你之前得到的个人Token填进环境变量里，然后给它绑一个域名（如果你的域名是顶级域名，建议你给它绑到三级减少被搜索引擎拉取的情况，安全性也更高）</p><p>然后，你就完成了这些准备工作，恭喜！</p><blockquote><p>然后，在<code>/assets/js/analysis.js</code>中，取消注释函数<code>initAnalytics()</code>中的<code>// umamiAnalytics();</code>，然后修改<code>getRealTimeVisitors()</code>中的token值为你的共享token，并取消位于定义最上方的<code>return false</code>，之后修改函数<code>getPageVisitors()</code>的定义，删除其最上方的内容，并将下方的<code>apiURL</code>中的<code>https://analytics.api.ravelloh.top</code>修改为你自己的路由转发API地址。<br>最后，转到<code>/assets/js/script.js</code>，修改<code>refreshInfo()</code>的定义(大概在790行)，将定义最下方的包含<code>接入Umami</code>字样的注释取消即可。<br>都修改完成后，所有功能应该正常工作。</p></blockquote><p>好，这些应该都不难办，注释取消就是把类似<code>//接入Umami</code>删掉，我相信你能够理解的。</p><h3 id="BetterStack的Uptime服务">BetterStack的Uptime服务</h3><p>这个还算简单，先去BetterStack那里注册一个账号，登录以后加上你的站点，获取API地址，关于获取这些作者API转发项目GitHub仓库的文档写的很全，我这里不做详述。</p><p><a class="link"   href="https://github.com/RavelloH/uptime-api-route" >Uptime API转发项目的GitHub仓库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><blockquote><p>之后，转到<code>/assets/js/analysis.js</code>，修改<code>loadUptime</code>的定义，将<code>site</code>的值修改为你的路由转发API地址。<br>接着，转到<code>/assets/js/i18n.js</code>，将其中<code>structureInfobarInfo()</code>的定义的返回值中最后几行的包含<code>需要先配置Uptime</code>字样的注释取消，<br>最后，转到<code>/assets/js/script.js</code>，修改<code>refreshInfo()</code>的定义(大概在790行)，将定义最下方的包含<code>接入Uptime模块</code>字样的注释取消即可。</p></blockquote><p>都修改完成后，所有功能应该正常工作。</p><h3 id="配置i18n-js">配置i18n.js</h3><p>我们需要找到<code>assets/js/i18n.js</code>文件，在其中找到这一些（大约在第179行），把它里面你已经配置的功能打开它，保证主题侧边栏设置里能够正常显示这些相关设置。</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">valueSettingItems</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        [<span class="string">&#x27;启用PJAX加载模式&#x27;</span>, <span class="string">&#x27;允许进行非刷新式页面请求，启用单页应用程序模式&#x27;</span>, <span class="string">&#x27;EnablePjaxLoad&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;启用PJAX Debug模式&#x27;</span>, <span class="string">&#x27;允许输出更多调试信息&#x27;</span>, <span class="string">&#x27;EnablePjaxDebug&#x27;</span>, <span class="string">&#x27;&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;启用instant.page预加载&#x27;</span>, <span class="string">&#x27;启动被动式预加载，提高响应速率&#x27;</span>, <span class="string">&#x27;EnableInstantPage&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;启用API预检查&#x27;</span>, <span class="string">&#x27;允许预先请求API地址，以预先选择响应速度更快的API&#x27;</span>, <span class="string">&#x27;EnableApiPrecheck&#x27;</span>],</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        [</span></span><br><span class="line"><span class="comment">            &#x27;启用BaiduStatistics分析器&#x27;,</span></span><br><span class="line"><span class="comment">            &#x27;允许将部分访问情况提交至统计服务器，以帮助分析页面&#x27;,</span></span><br><span class="line"><span class="comment">            &#x27;EnableBaiduTongji&#x27;,</span></span><br><span class="line"><span class="comment">            &#x27;&#x27;,</span></span><br><span class="line"><span class="comment">        ],</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">  </span><br><span class="line">        [</span><br><span class="line">            <span class="string">&#x27;启用Umami Analytics分析器&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;允许与自建Umami服务通信，以统计页面访问情况&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;EnableUmamiAnalytics&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        [<span class="string">&#x27;启用Umami 数据缓存&#x27;</span>, <span class="string">&#x27;允许使用会话存储以优化部分性能&#x27;</span>, <span class="string">&#x27;EnableUmamiCache&#x27;</span>, <span class="string">&#x27;&#x27;</span>],</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&#x27;启用Umami 事件统计&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;允许提交部分UI交互情况统计。会造成额外的网络请求&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;EnableUmamiEvents&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        [<span class="string">&#x27;启用Umami API&#x27;</span>, <span class="string">&#x27;允许从Umami服务获取实时访客量等信息&#x27;</span>, <span class="string">&#x27;EnableUmamiAPI&#x27;</span>],</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        [<span class="string">&#x27;启用Twikoo评论&#x27;</span>, <span class="string">&#x27;允许与评论服务器通信，以实现评论操作&#x27;</span>, <span class="string">&#x27;EnableComment&#x27;</span>],</span><br><span class="line">  </span><br><span class="line">        [</span><br><span class="line">            <span class="string">&#x27;接管下载事件&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;允许使用主题框架下载管理器替代浏览器下载，显示更多信息&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;EnableDownloadFunction&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&#x27;使用Fetch下载模式&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;使用fetch代替XMLHttpRequest下载，将无法显示进度&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;UseFetchDownload&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&#x27;启用音乐状态保存&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;允许将当前音乐播放列表保存至Cookie中，在页面重载后载入&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;EnableMusicStateStorage&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        [<span class="string">&#x27;启用自动登录&#x27;</span>, <span class="string">&#x27;允许在访问时自动以登录身份重新刷新令牌&#x27;</span>, <span class="string">&#x27;EnableAutoLogin&#x27;</span>],</span><br><span class="line">  </span><br><span class="line">        [<span class="string">&#x27;启用站点状态显示&#x27;</span>, <span class="string">&#x27;允许访问Uptime服务以显示站点服务状态&#x27;</span>, <span class="string">&#x27;EnableUptime&#x27;</span>],</span><br><span class="line">  </span><br><span class="line">        [<span class="string">&#x27;启用目录高亮&#x27;</span>, <span class="string">&#x27;在显示目录时自动高亮正在阅读的位置&#x27;</span>, <span class="string">&#x27;EnableMenuHighlight&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;启用高级超链接&#x27;</span>, <span class="string">&#x27;允许渲染部分高级形式超链接&#x27;</span>, <span class="string">&#x27;EnableAdvanceLink&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;启用标题重组&#x27;</span>, <span class="string">&#x27;在页面加载时自动重组标题，以提供高级锚点功能&#x27;</span>, <span class="string">&#x27;EnableUpdateMenu&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;启用图片预加载&#x27;</span>, <span class="string">&#x27;允许在页面加载时自动触发后文图片预加载&#x27;</span>, <span class="string">&#x27;EnableImgPrefetch&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;启用图片重组&#x27;</span>, <span class="string">&#x27;在页面加载时自动重组图片，以提供描述功能&#x27;</span>, <span class="string">&#x27;EnableImgReset&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;启用生成页面模型&#x27;</span>, <span class="string">&#x27;允许生成页面模型，以进行文章筛选、排序等功能&#x27;</span>, <span class="string">&#x27;EnablePageModel&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;启用锚点识别&#x27;</span>, <span class="string">&#x27;在锚点改变时运行调用相关事件，以进行索引筛选&#x27;</span>, <span class="string">&#x27;EnableHashCheck&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;启用导航栏高亮&#x27;</span>, <span class="string">&#x27;允许在页面路径变化时高亮导航栏&#x27;</span>, <span class="string">&#x27;EnableNavHighlight&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;启用图片放大&#x27;</span>, <span class="string">&#x27;允许在单击图片时放大图片&#x27;</span>, <span class="string">&#x27;EnableImgZoom&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;启用消息队列&#x27;</span>, <span class="string">&#x27;启用右下方消息队列以显示更多信息&#x27;</span>, <span class="string">&#x27;EnableMessage&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;启用索引数据拉取&#x27;</span>, <span class="string">&#x27;允许使用索引数据以进行搜索&#x27;</span>, <span class="string">&#x27;EnableSearchDataGet&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;跳过模型验证&#x27;</span>, <span class="string">&#x27;跳过本地与云端数据模型匹配&#x27;</span>, <span class="string">&#x27;EnableSkipModelTest&#x27;</span>, <span class="string">&#x27;&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;启用文章旁路推荐&#x27;</span>, <span class="string">&#x27;允许在文章结尾链接至上一篇/下一篇文章&#x27;</span>, <span class="string">&#x27;EnableArticlesRecommand&#x27;</span>],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">
  &lt;div class=&quot;note p-4 mb-4 rounded-small danger&quot;&gt;
    &lt;p&gt;本文写于2023-09，适用于RThemeV3主题，请注意你的主题版本&lt;/p&gt;

  &lt;/div&gt;
&lt;h3 id=&quot;配置Twikoo评论服务&quot;&gt;配置Twikoo评</summary>
      
    
    
    
    <category term="主题" scheme="https://blog.sotkg.cn/categories/%E4%B8%BB%E9%A2%98/"/>
    
    <category term="配置" scheme="https://blog.sotkg.cn/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="RTheme" scheme="https://blog.sotkg.cn/tags/RTheme/"/>
    
    <category term="主题配置" scheme="https://blog.sotkg.cn/tags/%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>用YesPlayMusic部署一个音乐解析站</title>
    <link href="https://blog.sotkg.cn/posts/5a8a6c8d.html"/>
    <id>https://blog.sotkg.cn/posts/5a8a6c8d.html</id>
    <published>2023-07-12T01:30:55.000Z</published>
    <updated>2023-09-14T11:51:56.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>YesPlayMusic是一个高颜值的第三方网易云音乐播放器，可以解锁一些网易云的灰色音乐，我们可以在电脑上安装它的客户端版本，也可以自己部署一个网页版随时随地使用<more></p><h2 id="部署至-Vercel">部署至 Vercel</h2><ol><li><p>部署网易云 API，详情参见 <a class="link"   href="https://neteasecloudmusicapi.vercel.app/#/?id=%e5%ae%89%e8%a3%85" >Binaryify/NeteaseCloudMusicApi <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。<br>你也可以将 API 部署到 Vercel。</p></li><li><p>点击<a class="link"   href="https://github.com/qier222/YesPlayMusic" >Github仓库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>右上角的 Fork，复制本仓库到你的 GitHub 账号。</p></li><li><p>点击<a class="link"   href="https://github.com/qier222/YesPlayMusic" >Github仓库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的 Add File，选择 Create new file，输入 <code>vercel.json</code>，将下面的内容复制粘贴到文件中，并将 <code>https://your-netease-api.example.com</code> 替换为你刚刚部署的网易云 API 地址：</p></li></ol><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;rewrites&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/api/:match*&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;destination&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://your-netease-api.example.com/:match*&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><ol start="4"><li><p>打开 <a class="link"   href="https://vercel.com" >Vercel.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，使用 GitHub 登录。</p></li><li><p>点击 Import Git Repository 并选择你刚刚复制的仓库并点击 Import。</p></li><li><p>点击 PERSONAL ACCOUNT 旁边的 Select。</p></li><li><p>点击 Environment Variables，填写 Name 为 <code>VUE_APP_NETEASE_API_URL</code>，Value 为 <code>/api</code>，点击 Add。最后点击底部的 Deploy 就可以部署到<br>Vercel 了。</p></li></ol><h2 id="部署到自己的服务器">部署到自己的服务器</h2><p>除了部署到 Vercel，你还可以将其部署到自己的服务器上</p><ol><li>部署网易云 API，详情参见 <a class="link"   href="https://github.com/Binaryify/NeteaseCloudMusicApi" >Binaryify/NeteaseCloudMusicApi <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li>克隆本仓库</li></ol><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/qier222/YesPlayMusic.git</span><br></pre></td></tr></table></figure></div><ol start="3"><li>安装依赖</li></ol><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn install</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ol start="4"><li><p>（可选）使用 Nginx 反向代理 API，将 API 路径映射为 <code>/api</code>，如果 API 和网页不在同一个域名下的话（跨域），会有一些 bug。</p></li><li><p>复制 <code>/.env.example</code> 文件为 <code>/.env</code>，修改里面 <code>VUE_APP_NETEASE_API_URL</code> 的值为网易云 API 地址。本地开发的话可以填写 API 地址为 <code>http://localhost:3000</code>，YesPlayMusic 地址为 <code>http://localhost:8080</code>。如果你使用了反向代理 API，可以填写 API 地址为 <code>/api</code>。</p></li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_NETEASE_API_URL=http://localhost:3000</span><br></pre></td></tr></table></figure></div><ol start="6"><li>编译打包</li></ol><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn run build</span><br></pre></td></tr></table></figure></div><ol start="7"><li>将 <code>/dist</code> 目录下的文件上传到你的 Web 服务器</li></ol><h2 id="Docker-部署">Docker 部署</h2><ol><li>构建 Docker Image</li></ol><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t yesplaymusic .</span><br></pre></td></tr></table></figure></div><ol start="2"><li>启动 Docker Container</li></ol><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name YesPlayMusic -p 80:80 yesplaymusic</span><br></pre></td></tr></table></figure></div><ol start="3"><li>Docker Compose 启动</li></ol><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></div><p>YesPlayMusic 地址为 <code>http://localhost</code></p><h2 id="部署至-Replit">部署至 Replit</h2><ol><li><p>新建 Repl，选择 Bash 模板</p></li><li><p>在 Replit shell 中运行以下命令</p></li></ol><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://raw.githubusercontent.com/qier222/YesPlayMusic/main/install-replit.sh)</span><br></pre></td></tr></table></figure></div><ol start="3"><li><p>首次运行成功后，只需点击绿色按钮 <code>Run</code> 即可再次运行</p></li><li><p>由于 replit 个人版限制内存为 512Mb（教育版为 2G），构建过程中可能会失败，请再次运行上述命令或运行以下命令：</p></li></ol><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/runner/<span class="variable">$&#123;REPL_SLUG&#125;</span>/music &amp;&amp; yarn installl &amp;&amp; yarn run build</span><br></pre></td></tr></table></figure></div><p>GitHub仓库：</p><a class="link"   href="https://github.com/qier222/YesPlayMusic"  title="" target=""> <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>]]></content>
    
    
    <summary type="html">自己部署一个基于YesPlayMusic的音乐解析站</summary>
    
    
    
    <category term="建站资源" scheme="https://blog.sotkg.cn/categories/%E5%BB%BA%E7%AB%99%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="建站" scheme="https://blog.sotkg.cn/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Hexo使用Github Action实现持续集成</title>
    <link href="https://blog.sotkg.cn/posts/7b063777.html"/>
    <id>https://blog.sotkg.cn/posts/7b063777.html</id>
    <published>2023-04-19T12:00:00.000Z</published>
    <updated>2023-10-10T09:25:09.303Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个高木粉，我买入了takagi.icu这个名，但毕竟域名要按用途来用，将来这个域名肯定不会是博客。<br>同时，作为一个学生党，这个域名能不能保持续订也是一个问题。所以我决定在GitHub上利用GitHub的Action构建一个稳定且一直能存在的博客，国内访问不一定快，但胜在一直都有。</p><span id="more"></span><p>但是，如果采用传统方法推送博客到GitHub站点仓库的话，这意味我需要每次更新博客都需要重新Git推送站点。</p><p>当然，这对于本地md文件写博客的人来说倒也没什么。但不幸的是，我自建了Qexo作为在线编辑器，显然传统的部署方式肯定是不行的。在之前，我一直发愁这个问题。</p><p>直到后来我在用GitHub Action来续订微软e5的时候突然才想起不是还有这东西么，于是去用它建立了一个全自动部署的GitHub托管站点</p><h3 id="Step-1-本地运行检查">Step.1 本地运行检查</h3><p>在进行部署之前，首先我们要确保站点本地是能顺利运行并且能够生成正常的静态站点文件。</p><p>部署一个Hexo博客（部署Hexo请参考Hexo.io的官方文档）</p><p>部署完成后，在站点根目录下运行如下指令（指令可简写为 hexo s）</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></div><p>访问http://localhost:4000后，在确保站点能够顺利正常显示内容并且运行正常后，再运行如下指令检查站点静态文件是否生成正常（hexo clean不可简写，但hexo generate可简写为 hexo g）</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate</span><br></pre></td></tr></table></figure></div><p>如果能够生成正常，再运行一次 hexo clean清除静态文件，本地运行检查步骤就完成了。</p><h3 id="Step-2-配置文件">Step.2 配置文件</h3><p>关于如何将仓库上传至GitHub，请自行查询资料，此处只介绍上传后的相关配置</p><p>首先先确认Hexo的配置文档config.yml有如下配置</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:yzsong06/Demo.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></div><blockquote><p>此处Repository请自行设置为你的GitHub Pages仓库，<a class="link"   href="http://xn--xxx-uc0ep96b.github.io" >例如xxx.github.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 注意使用SSH地址！</p></blockquote><h3 id="Step-3-生成密钥">Step.3 生成密钥</h3><p><strong>对于一些用户……</strong></p><ul><li>对于Windows10用户，可在Store商店安装Ubuntu</li><li>对于安卓用户，可安装Termux并安装OpenSSH</li><li>对于Linux用户，呃……你都用Linux了应该懂（Doge）</li></ul><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;Hexo Deploy Key&quot;</span> -f github-deploy-key -N <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure></div><p>这将会在当前目录生成两个文件：<br>github-deploy-key —— 私钥</p><p>github-deploy-key.pub —— 公钥</p><p>我们把<strong>私钥</strong>放到我们存放 Hexo 原始文件的代码仓库里面，用于触发 Actions 时使用。<br>把<strong>公钥</strong>放到 GitHub Pages 对应的仓库里面，并开启Action的写入权限，用于 Hexo 部署时的写入工作。</p><p><strong>配置私钥</strong>：</p><ol><li>在 GitHub 上打开保存 Hexo 的仓库，访问 <strong>Settings -&gt; Secrets -&gt; New secret</strong></li><li>然后在名字（<strong>Name</strong>）部分填写：<strong>HEXO_DEPLOY_KEY</strong><br>，一定要注意<strong>大小写</strong>，这个后面的 <strong>GitHub Actions</strong>  用的到，一定不能写错。</li><li>然后在 <strong>Value</strong> 的部分填入 <strong>github-deploy-key</strong> 中的内容</li></ol><p><strong>配置公钥：</strong></p><ol><li>接下来我们需要访问存放网页的仓库，也就是 Hexo 部署以后的仓库，比如：<a class="link"   href="http://Username.github.io" >Username.github.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 这种，访问 <strong>Settings -&gt; Deploy keys</strong></li><li>按 <strong>Add deploy key</strong> 来添加一个新的公钥</li><li>在 Title 中输入：<strong>HEXO_DEPLOY_PUB</strong> 字样，当然也可以填写其它自定义的名字，这里只是备注。</li><li>在 Key 中粘贴 <strong>github</strong>-deploy-key.pub 文件的内容</li><li>勾选 <strong>Allow write access</strong> 来打开写权限，否则会无法写入仓库导致部署失败</li></ol><h3 id="Step-4-建立Workflow">Step.4 建立Workflow</h3><p>首先在 Hexo 的仓库中创建一个新文件 <strong>.github/workflows/push.yml</strong><br>，文件名可以自己取，但是一定要放在</p><p><strong>.github/workflows</strong>目录下，也可使用<strong>Action</strong>的新建功能建立文件，文件内容如下</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">name: 部署站点</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [ <span class="string">&quot;main&quot;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="built_in">jobs</span>:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        node-version: [16.x]</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@v1</span><br><span class="line"></span><br><span class="line">      - name: 设置为 Node.js <span class="variable">$&#123;&#123; matrix.node-version &#125;</span>&#125;</span><br><span class="line">        uses: actions/setup-node@v1</span><br><span class="line">        with:</span><br><span class="line">          node-version: <span class="variable">$&#123;&#123; matrix.node-version &#125;</span>&#125;</span><br><span class="line"></span><br><span class="line">      - name: 配置环境变量</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">          HEXO_DEPLOY_PRI: <span class="variable">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;</span>&#125;</span><br><span class="line">        run: |</span><br><span class="line">          <span class="built_in">mkdir</span> -p ~/.ssh/</span><br><span class="line">          <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$HEXO_DEPLOY_PRI</span>&quot;</span> &gt; ~/.ssh/id_rsa</span><br><span class="line">          <span class="built_in">chmod</span> 600 ~/.ssh/id_rsa</span><br><span class="line">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">          git config --global user.name <span class="string">&quot;yzsong06&quot;</span></span><br><span class="line">          git config --global user.email <span class="string">&quot;yzsong06@outlook.com&quot;</span></span><br><span class="line">      - name: 安装部署时运行环境</span><br><span class="line">        run: |</span><br><span class="line">          npm i -g hexo-cli</span><br><span class="line">          npm i hexo-deployer-git --save</span><br><span class="line">          npm i</span><br><span class="line">      - name: 生成站点静态文件</span><br><span class="line">        run: |</span><br><span class="line">          hexo clean &amp;&amp; hexo generate</span><br><span class="line">      - name: 使用hexo-deployer部署站点</span><br><span class="line">        run: |</span><br><span class="line">          hexo deploy</span><br></pre></td></tr></table></figure></div><h3 id="Step-5-完成">Step.5 完成</h3><p>接下来保存文件后一般即可在仓库的Action页面看到反馈结果了，Job出现绿色对号即为部署成功！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;作为一个高木粉，我买入了takagi.icu这个名，但毕竟域名要按用途来用，将来这个域名肯定不会是博客。&lt;br&gt;
同时，作为一个学生党，这个域名能不能保持续订也是一个问题。所以我决定在GitHub上利用GitHub的Action构建一个稳定且一直能存在的博客，国内访问不一定快，但胜在一直都有。&lt;/p&gt;</summary>
    
    
    
    <category term="建站思路" scheme="https://blog.sotkg.cn/categories/%E5%BB%BA%E7%AB%99%E6%80%9D%E8%B7%AF/"/>
    
    
    <category term="建站" scheme="https://blog.sotkg.cn/tags/%E5%BB%BA%E7%AB%99/"/>
    
    <category term="Hexo" scheme="https://blog.sotkg.cn/tags/Hexo/"/>
    
    <category term="Github Action" scheme="https://blog.sotkg.cn/tags/Github-Action/"/>
    
  </entry>
  
  <entry>
    <title>有关高木圈囤域名用途之事的回应</title>
    <link href="https://blog.sotkg.cn/posts/72c539d5.html"/>
    <id>https://blog.sotkg.cn/posts/72c539d5.html</id>
    <published>2023-03-15T03:15:17.000Z</published>
    <updated>2023-09-13T09:35:46.510Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到了<a class="link"   href="https://mufeng086.top" >牧丰 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>写的《<a class="link"   href="https://mufeng086.top/2023/03/13/04/" >关于高木圈域名“囤货”这件事 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>》，其中提到了有关购入域名后用途的问题。我肯定是十分惭愧的，作为一名高木粉，同时个人也维护部分高木相关小站，在买域名上，我肯定是尽量向跟有关高木域名靠拢的。我也曾想过把站点用途分离，例如之前购入了zsong.top这个域名（2024-01月域名到期，目前还什么都没挂），也是想要把域名用途逐渐剥离的。</p><p>但毕竟最大的问题是：钱</p><p>作为一名经济方面还算宽松一点的学生党，我也可以拿出些许闲钱来建设站点，但对一名仅在高二的学生党来说，目前takagi.icu这个域名的运营成本已然不低（每年约￥40），若是在加上zsong.top续费成本还有其他站点相关后端服务以及其他服务来推算的话，每年维持所有站点的成本可达上百，对我来说负担已经有些难以承受，目前还是高中生，实在是经不起这样折腾。等到过几年，肯定是要换的，但现在，只能这样了😱</p><p>2023.07新更新：换了，<a class="link"   href="http://xn--sotkg-r52hy87blj3a5nzo9g.cn" >你看现在是sotkg.cn <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>（Doge）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天看到了&lt;a class=&quot;link&quot;   href=&quot;https://mufeng086.top&quot; &gt;牧丰 &lt;i class=&quot;fa-regular fa-arrow-up-right-from-square fa-sm&quot;&gt;&lt;/i&gt;&lt;/a&gt;写的《&lt;a class=&quot;li</summary>
      
    
    
    
    <category term="日志随记" scheme="https://blog.sotkg.cn/categories/%E6%97%A5%E5%BF%97%E9%9A%8F%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>国内高速静态资源CDN汇总</title>
    <link href="https://blog.sotkg.cn/posts/b18b1598.html"/>
    <id>https://blog.sotkg.cn/posts/b18b1598.html</id>
    <published>2023-03-14T12:27:54.000Z</published>
    <updated>2023-09-13T09:19:52.543Z</updated>
    
    <content type="html"><![CDATA[<p>最近在部署静态博客的时候，总是能遇到这个页面资源缺失，那个页面资源访问慢的问题。一看配置文件，嚯，配置文件CDN全是Jsdelivr资源地址。虽然Jsdelivr雀食很全，但是因为国内DNS污染与阻断，导致Jsdelivr在国内的表现相当不稳定，说不定哪天直接凉了都不好说，所以说我替换了部分基于Jsdelivr的资源文件CDN地址。<span id="more"></span><br>例如说评论区的JS与CSS资源，或者站点友链与说说的部分资源，这样可以使得国内访问站点资源速度加快，国内访客访问的时候也不会很难受。</p><h3 id="CDNJS-CDN">CDNJS CDN</h3><p>目前国内有很多相关CDNJS的 CDN，可以高速支持相关包文件的访问下载，例如说</p><ul><li>BootCDN: <a class="link"   href="https://link.juejin.cn?target=https%3A%2F%2Fwww.bootcdn.cn"  title="https://www.bootcdn.cn">www.bootcdn.cn <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li>七牛云: <a class="link"   href="https://link.juejin.cn?target=https%3A%2F%2Fwww.staticfile.org%2F"  title="https://www.staticfile.org/">www.staticfile.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li>360: <a class="link"   href="https://link.juejin.cn?target=https%3A%2F%2Fcdn.baomitu.com%2F"  title="https://cdn.baomitu.com/">cdn.baomitu.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li>字节跳动: <a class="link"   href="https://link.juejin.cn?target=https%3A%2F%2Fcdn.bytedance.com%2F"  title="https://cdn.bytedance.com/">cdn.bytedance.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><p>但这些 CDN 上的包资源并不全，很多NPM包，在这些 CDN 上是找不到的。原因是，它们都是从 <a class="link"   href="https://link.juejin.cn?target=https%3A%2F%2Fcdnjs.com%2F"  title="https://cdnjs.com/">CDNJS <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 上同步的数据，CDNJS 并不会把所有的 NPM 包进行同步，所以当你需要的一些 NPM 包没有在 CDNJS 上面，上面的CDN就没有用武之地了。</p><p>解决可以访问所有 NPM 包的问题，可以使用 <a class="link"   href="https://link.juejin.cn?target=https%3A%2F%2Funpkg.com%2F"  title="https://unpkg.com/">Unpkg <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>与 <a class="link"   href="https://link.juejin.cn?target=https%3A%2F%2Fcdn.jsdelivr.net%2F"  title="https://cdn.jsdelivr.net/">jsdelivr <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，但刚才我们也说过了，他们在国内的访问速度是不大行</p><p>于是就寻找整理了下，国内的 Unpkg 替代品。</p><h3 id="国内-Unpkg-NPM">国内 Unpkg NPM</h3><p>目前比较常见的对外的国内 Unpkg 有两个：</p><ul><li>饿了么（未公开）：<a class="link"   href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.elemecdn.com%2F"  title="https://github.elemecdn.com/">github.elemecdn.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>、<a class="link"   href="https://link.juejin.cn?target=https%3A%2F%2Fnpm.elemecdn.com%2F"  title="https://npm.elemecdn.com/">npm.elemecdn.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li>知乎：<a class="link"   href="https://link.juejin.cn?target=https%3A%2F%2Funpkg.zhimg.com%2F"  title="https://unpkg.zhimg.com/">unpkg.zhimg.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><p>但就实际测试来看，这两家CDN都有优缺点，饿了么CDN较全，但部分资源屏蔽且版本较旧，知乎CDN有白名单，整体表现跟上面CDNJS系列半斤八两</p><p>2023.07：饿了么CDN也启用白名单了，新的npmjs项目不受加速，流量较大的项目也被逐渐关闭</p><p>这两家CDN都是部署在国内阿里云的 CDN 上。</p><h3 id="后话">后话</h3><p>博客要想流量与浏览量都不错，除了要有好的文章以外，还有就是要保证站点的访问速度够好，这样可以降低访客流失率，确保站点站流量。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在部署静态博客的时候，总是能遇到这个页面资源缺失，那个页面资源访问慢的问题。一看配置文件，嚯，配置文件CDN全是Jsdelivr资源地址。虽然Jsdelivr雀食很全，但是因为国内DNS污染与阻断，导致Jsdelivr在国内的表现相当不稳定，说不定哪天直接凉了都不好说，所以说我替换了部分基于Jsdelivr的资源文件CDN地址。</summary>
    
    
    
    <category term="建站资源" scheme="https://blog.sotkg.cn/categories/%E5%BB%BA%E7%AB%99%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="CDN" scheme="https://blog.sotkg.cn/tags/CDN/"/>
    
  </entry>
  
  <entry>
    <title>国内外免费或低价建站平台汇总（长期更新）</title>
    <link href="https://blog.sotkg.cn/posts/5e57e4e5.html"/>
    <id>https://blog.sotkg.cn/posts/5e57e4e5.html</id>
    <published>2023-02-18T08:58:28.000Z</published>
    <updated>2023-09-13T12:21:08.445Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>这篇文章献给那些正在寻找免费或低价建站平台的站长们，这篇文章会不定时长期维持更新，列表会不断完善与修改更新，部分内容仅代表个人观点，仅供参考（白嫖虽好，可不要过度白嫖，薅羊毛多少也要有点度，把羊薅死属实得不偿失了）（<s>列表中的所有主机与平台可没有给我广告费，就我这小博客人家可看不上</s>）<span id="more"></span></p><p>下文中针对平台与计费将进行细致分类，推荐指数（满分5分）为个人评判，仅供参考。</p><p>国内与国外主机或平台收录适用于运营比较久的，看起来似乎容易跑路的与新出现的一般不会出现在本文章中，且便宜低价类型主机会主要倾向于能用的（那些基本把加钱升级才基本能用写在脸上的主机基本不会出现在本文中）</p><p>部分云服务商提供宝塔虚拟主机因为其具备完备root权限，故在下文中会归入轻量服务器</p><h3 id="国内虚拟主机">国内虚拟主机</h3><h4 id="Tips：">Tips：</h4><p>这个其实比较少吧，毕竟国内主机结合备案需求导致基本很少有可以实现免费或低价还支持PHP的主机商，，国内主机将包括国内运营商运营的香港等地区主机。</p><h4 id="条件免费">条件免费</h4><h5 id="三丰云"><a class="link"   href="https://www.sanfengyun.com/" >三丰云 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h5><h6 id="此条更新时间">此条更新时间</h6><p>2023年2月20日</p><h6 id="个人观点">个人观点</h6><p>三丰云是国内标称提供免费虚拟主机的，不过是附带条件的免费，一般你在网上看不到有人说它们主机宣传续期是需要条件的，比较难找，毕竟本身用户群体小，外加估计有风控与公关在吧，我之前已经体验过一台了，不想说什么。</p><h6 id="价格">价格</h6><p>免费使用30天，需要条件宣传续期</p><h6 id="物品">物品</h6><p>PHP＆ASP国内虚拟主机一台</p><h6 id="条件">条件</h6><p>每隔30天为他们在国内他们指定的论坛或博客上发表宣传文章，约100字以上</p><h6 id="优势">优势</h6><ul><li>目测国内主机，国内访问速度尚可（为规避备案问题走的似乎是海外解析线路）</li><li>支持切换PHP版本，最高似乎可到PHP8，支持ASP框架站点</li><li>可以一键安装部分PHP＆ASP站点平台</li><li>有文件管理与相对来说可以用的后台管理面板</li><li>可以自定义域名</li></ul><h6 id="劣势">劣势</h6><ul><li>不支持SSL证书，不能给站点增加https</li><li>每月主机访问流量仅5GB</li><li>主机共享IP与主服务器，而且怀疑有超开（正常现象）</li><li><s>我相信很少有真正愿意认真建站的站长原意冒着被骂死的风险去宣传主机续期</s></li></ul><h6 id="推荐指数">推荐指数</h6><p>3.0分，毕竟宣传一次好歹还给30天，宣传审核速度也不慢，主机也不是不能用，访问似乎还有些稳定？</p><h4 id="价格较低">价格较低</h4><h5 id="老薛主机"><a class="link"   href="https://www.laoxuehost.com/" >老薛主机 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h5><h6 id="此条更新时间-2">此条更新时间</h6><p>2023年2月20日</p><h6 id="个人观点-2">个人观点</h6><p>老薛主机运营的时间比较久了，从2008年运营至今一直在稳定提供低价虚拟主机与云服务器业务，支持的地区也比较多，用户评价似乎也不错，不过我没用过，但目测还行。</p><h6 id="价格-2">价格</h6><p>入门型78元/年，约合每月6.5元</p><h6 id="物品-2">物品</h6><p>香港＆美国（分标准与优质）＆郑州虚拟主机，支持PHP，主机面板是cPanal面板，权限不少，注意不同地区存在价格相同情况下主机配置不同。</p><h6 id="优势-2">优势</h6><ul><li>多地区主机选择，可按个人需求按需选择主机</li><li>cPanal主机面板，新手上手操作十分简单</li><li>支持SSL证书，站点支持https</li><li>国内网络线路优化，国内访问主机速度尚可</li><li>美国入门主机可无限绑定域名与建立数据库</li><li>美国与郑州地区主机网页空间使用SSD固态存储</li><li>美国地区主机拥有10Gbps DDoS防护</li></ul><h6 id="劣势-2">劣势</h6><p>劣势分立多种主机类型（均为入门版），请注意。</p><ul><li>香港与郑州入门版主机数据库仅能建立一个</li><li>香港与郑州入门版主机域名仅能绑定一个</li><li>所有入门版主机运行内存均为512MB</li><li>除美国标准入门主机外（2GB），其余主机网页空间均为500MB</li><li>郑州国内主机必须取得ICP备案与备案号后才能通过域名访问主机</li><li>主机独立IP需要自行购买，不同地区价格不同</li></ul><h6 id="推荐指数-2">推荐指数</h6><p>3.9分，除去不同地区主机所带来的不同配置需要注意外，总体主机质量还是不错的</p><h5 id="星辰云"><a class="link"   href="https://starxn.com/aff/CPHNJKRZ" >星辰云 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h5><h6 id="此条更新时间-3">此条更新时间</h6><p>2022年2月20日</p><h6 id="个人观点-3">个人观点</h6><p>这家提供商出现其实没几年，乍一看似乎基本就像那些国内圈钱跑路提供商似的，但其实他家是已注册并有注册资本（100万注册资本）的正规公司，再加上我本人也用过，相对来说在极低价格与提供的服务结合个人体验来看，主机质量是很不错的，所以故出现在本文中。</p><h6 id="价格-3">价格</h6><p>入门主机1.99元起/月（官方标注每位用户限购一次，但似乎没限制购买时间），普通主机3.99元起/月</p><h6 id="物品-3">物品</h6><p>香港地区虚拟主机，回国线路优化，似乎线路获取走的国内直链线路，没有先经过香港</p><h6 id="优势-3">优势</h6><ul><li>国内网络线路优化，Ping延迟一般可低于80ms</li><li>主机面板优化用户使用体验，面板交互比较人性化，设置方面比较便捷</li><li>支持SSL证书，站点支持https</li><li>拥有DDoS保护，很基础的那种</li><li>拥有维护模式，可确保站点修改维护时不至于因为访客打乱节奏</li><li>主机支持绑定子域名并可为其设定子目录（限量，视主机）</li><li>星辰云为用户提供了免费二级域名并可一键绑定虚拟主机</li></ul><h6 id="劣势-3">劣势</h6><ul><li>入门主机数据库略小（试用主机不要奢求什么，加钱升级到普通跑个WP足矣）</li><li>绑定证书不能为每个子域名分配单独证书，也就是说除了使用双域名证书或通配符证书外别无他法</li><li><s>在index.php相关伪静态设置上有点小问题，导致WP安装后链接内会有Index.php</s>（也有可能是我菜），但是出个文档告诉用户如何解决下该问题是可以的吧？</li><li>作为低价主机不要奢求十分稳定，本身稳定与快速在便宜的基础上是难以兼得的</li><li>MySQL版本较低，无法满足目前的一些新PHP程序对数据库的要求</li></ul><h6 id="推荐指数-3">推荐指数</h6><p>4.2分，这家看起来不像跑路云，而且确实不错。</p><h5 id="雨云"><a class="link"   href="https://www.rainyun.cc/?ref=MzE4MzU=" >雨云 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h5><h6 id="此条更新时间-4">此条更新时间</h6><p>2023年2月21日</p><h6 id="个人观点-4">个人观点</h6><p>雨云出现其实有几年了，从2018年至今他们一直都在提供云服务，不过感觉总是不声不响的，也没有什么大动静，不过总体价格看起来似乎是颇为吸引人的，比方说你能六七块钱就能买到Easypanal面板的虚拟主机，总体上也不是不能用，但是圈内不少反映这个主机存在丢数据库问题，所以如果你选择这家，最好做好数据库备份，不然丢了数据库就得不偿失了。</p><h6 id="价格-4">价格</h6><p>香港地区EP入门版虚拟主机￥7元/月（美国地区入门版EP主机￥6元/月，宿迁地区￥6元/月）</p><h6 id="推广">推广</h6><p><a class="link"   href="https://www.rainyun.cc/?ref=MzE4MzU=" >https://www.rainyun.cc/?ref=MzE4MzU= <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>（通过此链接注册可获得优惠券，首次购买美国EP主机可享1元/首月）</p><h6 id="物品-4">物品</h6><p>香港＆美国＆中国宿迁地区Easypanal面板虚拟主机（国内主机需备案）</p><h6 id="优势-4">优势</h6><ul><li>美国地区主机具备超大带宽且使用CN2线路，香港地区主机使用BGP线路，国内访问速度相对不错</li><li>提供国内宿迁地区主机，访问延迟低，使用BGP线路（需备案）</li><li>Easypanel面板，上手简单，轻松建站</li><li>主机支持备份且可开启每日自动备份主机数据</li><li>网页空间使用SSD固态存储</li><li>支持SSL，可通过https访问</li></ul><h6 id="劣势-4">劣势</h6><ul><li>多位用户反映存在丢数据库问题，如一定坚持使用请注意数据备份</li><li>网站空间容量为0.5GB，相比星辰云同价位略小</li><li>数据库容量为200MB，相比星辰云同价位略小</li><li>不知其运营稳定程度如何</li></ul><h6 id="推荐指数-4">推荐指数</h6><p>4.1分，主要是有黑历史</p><h3 id="国外虚拟主机">国外虚拟主机</h3><h4 id="完全免费">完全免费</h4><h5 id="Byet及其分销">Byet及其分销</h5><h6 id="此条更新时间-5">此条更新时间</h6><p>2023年2月21日</p><h6 id="个人观点-5">个人观点</h6><p>这种主机真的算免费主机界的元老了，从2006年就开始提供免费主机服务，就以与同时代相比极其不错的配置，以及附带二级域名与简单易用的主机面板。2006年至今，Byet经历多次改动，目前来看依然还算不错，新手用来琢磨建站是具备优势的，但不推荐长期使用。同时其背后主机商Ifastnet为了宣传自家付费主机，将主机整体进行分销，也导致你在网上能够看到大量基于此主机分销所构建的“免费主机”。后台面板上的“小火龙”可以说算是它们基于此分销的标志了，有说法说：“ifastnet垄断了市场上70％的免费主机。“可见其分销规模之夸张。我个人早期建站起步就是使用的Byet这类主机，还是能用的。</p><h6 id="物品-5">物品</h6><p>英国地区免费主机x？（毕竟多家分销，鬼知道你能注册几台）</p><h6 id="优势-5">优势</h6><ul><li>免费部分是完全免费且可使用的，基本可以说是免费主机界的”老大哥“，只要你注意点用，基本免费主机部分可以满足一个小站长的需求。</li><li>可建立多个MySQL数据库，数据库容量约200MB？（参考下方，各分销说法不同）</li><li>网站空间存储约5GB（不同分销商并没有说明白具体多大，此处5GB是参考Byet官方说法）</li><li>运行内存经过测试基本为512MB，可满足小型应用需求，但无法带起过于复杂的作业</li><li>PHP版本为7.4，基本可满足当下大部分网站程序运行需求</li><li>免费提供主机二级域名与其他二级域名，不过有关其质量懂得都懂</li><li>支持SSL，站点可https访问（Apache协议证书）</li><li>主机面板自带应用商店，可安装部分PHP应用程序（例如WordPress与Joomla）</li><li>主机面板针对二级域名权限较高，可以对其进行CNAME，TXT，MX定制</li><li>可自定义域名以及为每个域名单独指定目录与SSL证书</li><li>网站内不会插入广告</li></ul><h6 id="劣势-5">劣势</h6><ul><li>主机绝对性超开问题，以及IP部分性屏蔽问题</li><li>主机托管在英国地区，且大陆线路极其垃圾，速度一般，且禁用标准Ping方式</li><li>PHP虽为7.4，但免费主机也只能7.4了，切换其他版本需要付费主机</li><li>作为全免费主机以及结合其运营的时间来看，虽不需过度担心跑路问题，但需要注意其针对主机的数据库稳定性是否稳定</li><li>主机Cron作业免费主机限时5秒</li><li>MySQL版本未知，其对最新PHP程序的兼容性存疑</li><li>主机FTP服务器限制单个握手，导致FTP传输文件若数量过多会导致极其龟速</li><li>通外网络带宽结合测试结论是约为最大1MB/s速度</li><li>每日限制10000次访问次数，每月限制流量约20GB</li><li>全免费且分销庞杂，如果薅过了可能会导致所有个人在各个分销商的免费主机均受牵连（结合邮箱与IP验证用户）</li><li>自定义域名仅能NS解析，若想CNAME解析需要一些操作，可参考我的博客文章</li></ul><h6 id="推荐指数-5">推荐指数</h6><p>3.6分，毕竟相对来说还是可以用的，而且是很多站长的起步之地吧（Doge）</p><h5 id="Freehostia"><a class="link"   href="https://www.freehostia.com" >Freehostia <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h5><h6 id="此条更新时间-6">此条更新时间</h6><p>2023年2月21日</p><h6 id="个人观点-6">个人观点</h6><p>这家主机我使用过一段时间，相对来说的话，他能实现的事情也不少，资格也很老，成立时间不比Byet时间短多少，但是比Byet用户可调用的资源少点。面板也比较简单易用功能强大，主机是在美国地区托管的，测试大陆线路基本和Byet一样稀碎，但这家也存在部分方面较大优势，还是可以的，申请需要自己有一个域名，申请后可使用12个月，快到期时可以续期再续12个月。</p><h6 id="物品-6">物品</h6><p>美国地区免费主机x1（12个月可续期使用权），申请时需要个人域名与填写表格</p><h6 id="优势-6">优势</h6><ul><li>主机面板简单易用，登录使用方便快捷</li><li>主机支持SSL，站点支持https访问，且可为域名一键生成免费SSL证书并自动续期</li><li>主机面板可一键安装部分PHP应用，在线文件管理器可在线解压</li><li>FTP管理速度尚可，不过对文件握手数量存疑</li><li>网站内不会插入广告</li></ul><h6 id="劣势-6">劣势</h6><ul><li>稳定性存疑，大陆线路稀烂</li><li>主机具有大部分Byet中提到的缺点，不做重复撰述</li><li>每月仅6GB访问流量</li><li>域名只可绑定三个，且主机没有二级域名</li><li>数据库容量过低（10mb），这种容量适合Typecho？</li><li>网站空间250Mb，比较的小啊</li></ul><h6 id="推荐指数-6">推荐指数</h6><p>3.1分，部分来看比Byet差，却也比Byet存在些微优势</p><h3 id="国内静态托管">国内静态托管</h3><h5 id="Gitee-Pages">Gitee Pages</h5><h6 id="此条更新时间-7">此条更新时间</h6><p>2023年2月22日</p><h6 id="个人观点-7">个人观点</h6><p>码云作为国内地位可与国外GitHub齐平的代码托管平台，同样也提供了免费的静态页面托管服务，相对来说一些站长会选择在这上面托管平台，毕竟国内访问速度快，不过其首先复杂的实名认证以及极其严格的仓库内容审核机制让我望而却步，最后选择了其他地方托管我的静态博客。</p><h6 id="优势-7">优势</h6><ul><li>国内服务国内托管，站点访问速度快</li><li>自带免费 *.gitee.io 二级域名，无需自购域名</li><li>支持Hexo与Hugo等多种静态页面托管</li></ul><h6 id="劣势-7">劣势</h6><ul><li>比较严格的实名认证机制（不过似乎不限制认证年龄？）</li><li>十分严格的仓库内容审核机制（你仓库站点被下架了你自己都不知道怎么没的）</li><li>与部分静态博客框架不兼容，部分框架需要安装插件实现部署</li><li>无法自定义域名（可自定义域名的Pro服务收费且现在暂时无法购买，除非你仓库代码写的很好，但肯定不是博客）</li><li>相关文档资料较少，上手略繁琐</li></ul><h6 id="推荐指数-7">推荐指数</h6><p>4.1分，对于只是博客而且写文正常的站长来说是个十分不错的选择，毕竟国内且送域名，而且速度快的平台，谁不想要呢？</p><h5 id="WuliHub">WuliHub</h5><h6 id="此条更新时间-8">此条更新时间</h6><p>2023年2月22日</p><h6 id="个人观点-8">个人观点</h6><p>这个不算静态站点托管平台，它适合托管些许HTML源码，但是用户若想查看源码还要登录属实是有些许麻烦，要不是因为它免费50mb静态存储也不会出现在这里（Doge）</p><h6 id="优势-8">优势</h6><ul><li>国内存储，访问速度快</li><li>快速部署，仅需上传HTML压缩包即可部署</li><li>免费附带二级域名</li></ul><h6 id="劣势-8">劣势</h6><ul><li>免费版套餐访客若想查看站点需要登录</li><li>不支持静态框架常规快速部署方式（你要部署也不是不行）</li><li>站点不能自定义域名</li></ul><h6 id="推荐指数-8">推荐指数</h6><p>2.3分，只是用来托管个页面可以试试，也还算能用，毕竟好歹是国内服务器</p><h3 id="国外静态托管">国外静态托管</h3><h5 id="Github-Pages">Github Pages</h5><h6 id="此条更新时间-9">此条更新时间</h6><p>2023年2月22日</p><h6 id="个人观点-9">个人观点</h6><p>这个目前来看很受欢迎，在网上能够看到很多博客都是基于此构建的，毕竟是基本可以说最大的代码托管平台，而且大部分静态托管平台都依托它为仓库存储，所以即传即用外加不需要自己购买域名，成为了不少站长的选择</p><h6 id="优势-9">优势</h6><ul><li>拥有大量文档资料支持，部署快捷迅速</li><li>几乎完全免费的持续静态页面托管服务（<s>每月免费Action构建时间2000分钟，没几个只是建博客的站长能用完吧</s>）</li><li>自带 *.github.io的二级域名，无需自购域名（<s>相信这就是很多站长心动所在？</s>）</li></ul><h6 id="劣势-9">劣势</h6><ul><li>国内不稳定的访问速度（不管是GitHub本身还是Pages）</li><li>免费版自定义域名不支持SSL证书</li><li>屏蔽了百度爬虫（百度搜索无法爬取新的*.github.io域名的博客）</li></ul><h6 id="推荐指数-9">推荐指数</h6><p>4.5分，免费的情况下还有二级域名，如果国内网络环境没有问题的话可以打到满分（<s>显然这是不可能的</s>）</p><h5 id="Gitlab-Pages">Gitlab Pages</h5><h6 id="此条更新时间-10">此条更新时间</h6><p>2023年2月22日</p><h6 id="个人观点-10">个人观点</h6><p>这个不大常见，主要是首先用Gitlab的人比GitHub略少一些，而且Gitlab Pages功能藏的也比较深，而且要想使用其免费的构建时间，还得验证信用卡付款方式。不过结合本身Gitlab在国内的速度来看，相对来说访问体验可能比GitHub要好一些。</p><h6 id="优势-10">优势</h6><ul><li>Gitlab相关服务在国内访问速度比GitHub强，且Gitlab本身支持简体中文</li><li>每月免费构建时间约400分钟左右，对只建博客的个人站长来说够用了</li><li>自带*.gitlab.io的二级域名，无需自购域名</li></ul><h6 id="劣势-10">劣势</h6><ul><li>若想使用其Page功能，你需要先通过付款方式验证</li><li><s>由于上面那一条的原因</s>，相关Gitlab Pages的使用文档比GitHub少一些</li></ul><h6 id="推荐指数-10">推荐指数</h6><p>4.2分，若是无需信用卡就能生成站点的话，分数可以更高</p><h5 id="Vercel">Vercel</h5><h6 id="此条更新时间-11">此条更新时间</h6><p>2023年2月22日</p><h6 id="个人观点-11">个人观点</h6><p>相对来说，我比较推荐这个（写文时本博客也是托管在Vercel），虽然其主IP与自带二级域名*.vercel.app在国内已被墙（<s>黑产滥用导致</s>），但是如果你有一个自己的域名的话，并不影响这是个好的静态托管平台，它可以托管大量静态框架服务（<s>似乎也有PHP的身影</s>）也可以托管类似部分Python等云函数程序，且提供海量框架模板与插件，并可通过CLI构建站点，同时也是为数不多拥有香港节点的免费静态托管平台。</p><h6 id="个人示例站点">个人示例站点</h6><p>本博客（<a href="https://blog.sotkg.cn">https://blog.sotkg.cn</a>）</p><h6 id="优势-11">优势</h6><ul><li>速度不错（国内相关Ping测速延迟在60~80ms左右）</li><li>每月免费构建不限时（貌似）</li><li>免费版套餐每月拥有100GB流量</li><li>免费版套餐拥有100GB函数存储容量</li><li>海量框架站点模板与插件支持，同时也支持大量基本框架</li><li><s>隐晦的部分PHP相关支持</s></li><li>可从GitHub，Gitlab，Bitbucket一键导入项目</li><li>可自定义域名且可为其自动生成与续期免费SSL证书</li><li>对Node.js与Next.js支持很不错（Next.js貌似就它家的）</li></ul><h6 id="劣势-11">劣势</h6><ul><li>*.vercel.app二级域名被墙，所以你需要自备一个域名</li><li>虽然每月免费构建不限时（貌似），但每日限制100次构建次数</li><li>全英文后台界面，不过我们仍可翻译页面来折中解决问题</li></ul><h6 id="推荐指数-11">推荐指数</h6><p>4.5分，如果域名没被墙可以满分</p><h5 id="Netlify">Netlify</h5><h6 id="此条更新时间-12">此条更新时间</h6><p>2023年2月22日</p><h6 id="个人观点-12">个人观点</h6><p>跟Vercel感觉能平起平坐的静态页面托管平台，不过免费套餐体量比Vercel略小些，也提供了一个*.netlify.app的域名。但支持的东西也比Vercel少，站点模板与插件同样略少（CMS支持比Vercel多），但其拥有一个很大的优势：CMS。</p><p>Netlify官方为静态博客打造了一个CMS，可以支持大量的静态博客框架，且安装使用也很方便，对于部分对写作静态博客头疼的站长来说确实不错，不过这个CMS对移动端用户不大友好，且对中文兼容性很迷（有时候打不出来），在本博客刚起步的时候是采用的Hexo＋Netlify并附带其CMS构建的，但因为以上问题，且有更加良好的替代品（<s>还有我的技术也进步了</s>），最终在2023年2月完全在个人静态博客上移除Netlify CMS系统并把个人静态博客主体转移至Vercel。</p><h6 id="优势-12">优势</h6><ul><li>自带*.netlify.app的二级域名，且截止至2023年2月，国内可正常访问此二级域名（但不推荐依赖此域名建立站点，此域名适合演示用）</li><li>网络解析速度很快，比起Vercel来说，移动宽带对其响应更快（40~70ms左右）</li><li>支持大量静态博客框架与插件（<s>没Vercel多</s>），但兼容性似乎比Vercel要差，且缺少部分静态框架预制构建指令模板</li><li>官方支持CMS，新手站长写作更加方便快捷</li><li>可从GitHub与Gitlab一键导入项目</li><li>免费版套餐拥有每月100GB访问流量</li><li>免费版套餐拥有每月300分钟的构建时间，对一般个人博客来说够用了</li><li>可自定义域名且可为其自动生成与续期免费SSL证书</li><li>拥有站点强制https的选项，可以解决一些静态资源兼容性问题</li><li>支持的站点自定义设置选项比Vercel要多</li><li>可以使用CLI上传构建代码</li></ul><h6 id="劣势-12">劣势</h6><ul><li>参考Vercel，不敢保证其解析稳定性，且其自定义域名依赖其*.netlify.app域名Cname解析，所以不敢保证一旦被墙官方是否愿意出来解决问题</li><li>站点全英文且翻译站点会导致站点崩溃，所以不能使用翻译查看管理后台，需要有一定英文基础。</li><li>国内网络访问Netlify比较迷，虽然目前看访问正常。</li></ul><h6 id="推荐指数-12">推荐指数</h6><p>4.6分，目前域名没被墙而且速度不错，构建对新手也还不错</p><h5 id="Render"><a class="link"   href="https://render.com" >Render <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h5><h6 id="此条更新时间-13">此条更新时间</h6><p>2023年2月22日</p><h6 id="个人观点-13">个人观点</h6><p>Render是我最近发现的一个宝藏级别的平台，拥有每月100GB的访问流量，针对静态的构建时间每月也有500分钟左右，托管几个静态站点，完全够用，就是这玩意太冷门了，而且名字也是比较常见的关键词&quot;Render“渲染，所以搜索引擎都搜不出来可还行（单击此条目标题可跳转到Render），在上面构建hexo时请注意把构建命令换成“yarn build”</p><h6 id="优势-13">优势</h6><ul><li>服务器总体速度比较均衡，相对来说静态站点速度还是可以的</li><li>每月100GB访问流量足以满足小站点需求</li><li>拥有 *.onrender.com的免费二级域名，但不推荐作常用域名</li><li>可以自定义绑定域名并且自动生成SSL证书</li><li>免费版每月500分钟免费构建时间</li></ul><h6 id="劣势-13">劣势</h6><ul><li>出现其实没几年，不确定稳定性</li></ul><h6 id="推荐指数-13">推荐指数</h6><p>4.5分，访问速度比较稳当，构建时间也不短</p><h5 id="Cloudflare-Pages">Cloudflare Pages</h5><h6 id="此条更新时间-14">此条更新时间</h6><p>2023年2月22日</p><h6 id="个人观点-14">个人观点</h6><p>严格意义上，这不算一个静态页面托管平台，Pages服务是Cloudflare针对免费版套餐的一个附属服务，但毕竟Cloudflare在国内的网络状态有目共睹，感觉访问速度甚至不如GitHub    Page在国内的速度</p><h6 id="优势-14">优势</h6><ul><li>貌似不限制流量，但限制每日100000次调用（<s>感觉我是不是数错了0</s>）</li><li>建站点还送CDN，国内反向加速祝您博客畅游互联网（<s>Doge</s>）</li><li>一键绑定已在Cloudflare设置解析的域名（<s>也似乎只能绑定在那里解析的</s>）</li><li>可以享受到所有Cloudflare特性（<s>祝您网站中国红！</s>）</li></ul><h6 id="劣势-14">劣势</h6><ul><li>最大的劣势都写在优势里了（<s>确信</s>）</li><li><s>构建命令只能用一行，所以在上面构建HTML以外的站点会很麻烦</s>（最新版修正了命令缺陷）</li></ul><h6 id="推荐指数-14">推荐指数</h6><p>3.5分，真不咋地，就算网络环境好了也是那样</p><h5 id="Bitbucket-Pages">Bitbucket Pages</h5><h6 id="此条更新时间-15">此条更新时间</h6><p>2023年2月22日</p><h6 id="个人观点-15">个人观点</h6><p>这个我没用过（不过注册过Bitbucket的账号），不过据说也还算是能用，自带*.bitbucket.io的二级域名</p><h6 id="优势-15">优势</h6><ul><li>据说Bitbucket的仓库版本管理不错</li><li>自带*.bitbucket.io的二级域名，且自带证书（貌似被墙了？）</li></ul><h6 id="劣势-15">劣势</h6><ul><li>无法自定义域名（好像没什么用了）</li><li>只能通过https协议访问站点（http会被强制跳转至https，且无法配置）</li><li>所有项目的静态网站代码都只能放在专门的站点仓库里（<a class="link"   href="http://AccountName.bitbucket.io" >AccountName.bitbucket.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>），不能像 GitHub 那样可以在每个项目里用 gh-pages 分支保存文件</li><li>百度不收录（被墙了收录啥？）</li></ul><h6 id="推荐指数-15">推荐指数</h6><p>1.8分，墙+本身就一般，网站面向国内不推荐使用</p><h4 id="云Paas平台">云Paas平台</h4><h5 id="Zeabur">Zeabur</h5><h6 id="个人观点-16">个人观点</h6><p>国内团队运营的项目，使用谷歌云，在大陆访问效果还不错，也有免费套餐</p><h3 id="后言">后言</h3><p>本文章会不定时不断更新，如果你有推荐主机或其他资源，可留言在评论区</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;这篇文章献给那些正在寻找免费或低价建站平台的站长们，这篇文章会不定时长期维持更新，列表会不断完善与修改更新，部分内容仅代表个人观点，仅供参考（白嫖虽好，可不要过度白嫖，薅羊毛多少也要有点度，把羊薅死属实得不偿失了）（&lt;s&gt;列表中的所有主机与平台可没有给我广告费，就我这小博客人家可看不上&lt;/s&gt;）</summary>
    
    
    
    <category term="建站资源" scheme="https://blog.sotkg.cn/categories/%E5%BB%BA%E7%AB%99%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="建站" scheme="https://blog.sotkg.cn/tags/%E5%BB%BA%E7%AB%99/"/>
    
    <category term="CDN" scheme="https://blog.sotkg.cn/tags/CDN/"/>
    
  </entry>
  
  <entry>
    <title>国内外域名购买个人观点</title>
    <link href="https://blog.sotkg.cn/posts/2a6c12b4.html"/>
    <id>https://blog.sotkg.cn/posts/2a6c12b4.html</id>
    <published>2023-02-18T02:48:33.000Z</published>
    <updated>2023-10-11T00:45:55.410Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>本来觉得不用写这个的，毕竟有比价网站在，可是每天看着一堆人买了一堆乱七八糟还不符合自己心意，而且买了还发现别的地方买自己这个域名会更便宜后悔的也大有人在，也有买了域名还被封的，我也买过一些域名，故整理一些个人观点供看到这篇文章的人参考下。<span id="more"></span></p><h3 id="需求">需求</h3><p>多数人买域名的需求是为了能够让自己的站点在互联网上能更加显眼（比方说使搜索引擎收录，好记的前缀名字等等），也有一部分单纯为了有个标记（<s>便宜</s>）而买（<s>买6位数字xyz的那些人</s>），结合个人需求购买域名是很重要的，毕竟我们买的就是称心如意。</p><h5 id="国内的域名提供商">国内的域名提供商</h5><p>国内的域名提供商感觉十分的稀缺一般，但是它们都有一个特点，那就是首年价格很多看起来都很亲民一般，吸引着你去购买，而且部分续费甚至比国际域名提供商还要低（阿里云top域名典型，29元/年），不过有得肯定是必有失的，从国内购买域名，你需要面对的一些事情（个人没有从国内购买过域名，下方部分特点来自网络评论，仅供参考）</p><ul><li>网络内容监管：有一家网站使用了国内购买的域名＋美国VPS建立了一个博客站点，分享了一篇有关科学上网的文章，结果被域名提供商检测到并勒令其删除，否则将停用其域名解析，现在这家博客已转移域名到其他提供商去了</li><li>续费价格反转：这个倾向于部分小一点的域名提供商，国内比较大的那些相对来说会在域名购买时标注明白续费价格，有部分国内域名提供商购买域名时针对新用户的报价较低，但当一年过去，用户想要续费时发现价格意外性的上涨离谱）</li><li>身份信息递交：基本上所有的国内域名提供商购买域名时都需要实名认证且需要年满18岁，无非分严与不严，相对来说，这也是一种保护中国互联网的手段，我个人不是十分反对这样做，有信息在域名提供商那里，只要一般它不泄密，你也能好好做网站，不至于做一些违法乱纪的事情。看个人需求啦，比方说未成年站长就没法通过这一关了</li><li>隐私保护缺失：这个倾向于国内一些小的提供商，他们域名的Whois隐私保护功能是收费的，国内较大的域名提供商一般都自带免费的域名Whois隐私保护了。域名Whois像域名的“身份证”，没有隐私保护的情况下，可以通过网络查到其相关信息，包括了域名何时购入，何时过期、购买域名的所有人信息等等。而Whois隐私保护就是保护那部分域名所有人信息，本身国内递交域名Whois信息就必须属实，如果说再不带隐私保护（<s>点名表扬cn域名</s>），基本你的所有信息就完全暴露在互联网上了，而花钱购买隐私保护又有些小贵（很多小提供商的隐私服务是10～20元一年，基本能占据域名标准续费的一半费用），所以如果说一定要在国内购买域名，请选择较大的域名提供商，除部分域名以外，基本都有隐私保护。</li></ul><h5 id="我已经买入了国内域名，后悔了怎么办？">我已经买入了国内域名，后悔了怎么办？</h5><p>这个还是可以补救的，毕竟域名是可以转移域名提供商的，有点像国内的携号转网（<s>但比携号转网容易些</s>），所以我们可以通过转移域名提供商的方式来解决问题。</p><p>转移时需要注意的事情：</p><ul><li>注意转移域名价格：部分国外域名提供商转入域名价格甚至比续费还要贵（大部分国外域名提供商转入费用都是跟域名续费价格一致，因为转入后会自动续费一年），这种时候，推荐你使用我上文《<a class="link"   href="https://takagi.icu/2023/02/01/liang-ge-yu-ming-bi-jie-wang-zhan-tui-jian/" >两个域名比价网站推荐 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>》中提到的第二家域名比价网站输入个人域名的顶级域，进行转入费用评估。</li><li>转移域名需要时间：大部分域名转移的时间都需要3~5天左右（其实一般一到三天就能解决问题，可问题是一到三天是国外互转），在域名转移期间将无法修改域名DNS解析（所以先配置好解析再去考虑转移），这点还是要注意的，一定要确保这三到五天内域名后方主机是能稳定的提供线路的，不然闭站3天基本搜索引擎权重与收录也没的差不多了，就有点得不偿失了。</li><li>转移后支付方式改变：国内域名多使用支付宝与微信进行支付，但到了国外，多见信用卡或者PayPal支付，少部分支持支付宝，但基本没有支持微信支付的。所以要注意转移后个人有对应的支付方式（<s>这点基本困扰大部分未成年站长，但其实未成年站长也很难买国内域名？</s>）</li></ul><h5 id="那有没有合适的国外域名转入商推荐？">那有没有合适的国外域名转入商推荐？</h5><p>有的，而且不止一家，我在这里提及几家</p><ul><li><a class="link"   href="https://www.namesilo.com" >Namesilo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：这家最大的好处在于便宜，而且支持支付宝支付（支付宝在支付美元时会按汇率自动转为需付的人民币），且声誉一向不错，域名续费基本不乱涨价，支持免费的Whois隐私保护，需要注意的是站点的人机验证问题，站点本身国内访问不算很慢，但到了需要鉴定人机的时候基本你就会看它一直转（<s>移动网络尤甚</s>），如果实在卡死可以手动科学上网来缓解下，同时站点后台新旧混用，导致管理跳转时比较麻烦，而且没有对手机做UI适配是一件很不爽的事情，全英文界面，没有中文。</li><li><a class="link"   href="https://porkbun.com/" >PorkBun <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：这家也很便宜，同时也支持支付宝支付，而且部分域名续费可能比Namesilo还便宜？（<s>基本还是Namesilo的价格略胜一筹，Ns真的便宜啊！</s>），这家也支持免费的Whois隐私保护，管理后台比Namesilo友好一些（<s>最起码没有新旧混用</s>），也没有十分难受的人机验证，全英文界面，没有中文。</li><li><a class="link"   href="https://www.sav.com" >Sav <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：Sav针对部分域名价格是真的低（<s>2.99美元一年你敢信？</s>），但作为近些年才出现的提供商，而且网络风评很一般，支付方式上仅支持信用卡或PayPal支付，感觉水比较深，个人没有尝试过。</li></ul><h5 id="国外有没有购入便宜的域名？">国外有没有购入便宜的域名？</h5><p>有的，基本上面那三家都很便宜，而且Namesilo与Porkbun（<s>猪肉包</s>）都有针对新用户的优惠价，且Porkbun与TrueName携手合作，找到优惠码甚至部分域名首年购买免费（<s>只能用信用卡了</s>）</p><h5 id="一只鬆是怎么购买的呢？">一只鬆是怎么购买的呢？</h5><p>这个吧，我是全部国外域名提供商，之前从Namesilo 0.99美元入手了首年Top域名，但后来发现Porkbun有更符合个人需求的Icu域名，所以1.88美元入手了Takagi.icu域名（<s>高木同学天下第一！</s>），目前准备转到Namesilo（续费比猪肉包便宜）</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;本来觉得不用写这个的，毕竟有比价网站在，可是每天看着一堆人买了一堆乱七八糟还不符合自己心意，而且买了还发现别的地方买自己这个域名会更便宜后悔的也大有人在，也有买了域名还被封的，我也买过一些域名，故整理一些个人观点供看到这篇文章的人参考下。</summary>
    
    
    
    <category term="建站思路" scheme="https://blog.sotkg.cn/categories/%E5%BB%BA%E7%AB%99%E6%80%9D%E8%B7%AF/"/>
    
    
    <category term="域名" scheme="https://blog.sotkg.cn/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>国内外免费域名DNS解析个人推荐</title>
    <link href="https://blog.sotkg.cn/posts/f6c1ba93.html"/>
    <id>https://blog.sotkg.cn/posts/f6c1ba93.html</id>
    <published>2023-02-09T23:26:47.000Z</published>
    <updated>2023-10-10T09:25:09.301Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>域名解析这个东西，一般来说，我们购买域名后，大部分域名提供商会提供一个免费DNS解析。例如阿里云DNS，腾讯云Dnspod等等，但相对来说，大部分提供商给的DNS解析不算最优解，甚至存在一些不稳定因素。我在建站上也摸爬滚打了颇久，各种各样的DNS解析服务也用过不少，所以我在这里写一下我自己有关DNS解析选择的观点，仅供参考，但确实算真实使用体验。</p><span id="more"></span><h3 id="按需选择">按需选择</h3><p>相对来说，不同地区的主机在解析上存在不同的选择（以下介绍均为免费版套餐），选对一个符合你主机情况的解析是对你网站的访客很有帮助的。</p><h4 id="如果你的主机在国外">如果你的主机在国外</h4><h6 id="Cloudflare">Cloudflare</h6><p>“Cloudflare“，一个让诸多站长向往的（<s>白嫖之地</s>）DNS解析服务提供商。<s>目前个人域名 takagi.icu）也是通过此DNS解析。</s>（目前takagi.icu与个人新域名sotkg.cn都使用青云DNS）Cloudflare虽然在国内素有“减速云”之称（<s>SaaS解析法除外</s>），但其实一般你不开它的CDN，国内解析速度还是可以的，其配套服务也让很多站长心动，例如Worker，Page，自带DDos防御（<s>需要开启反向加速CDN</s>），域名重定向与访客规则，免费的通配符SSL证书，都是一个对于新手站长来看，很不错的选择。</p><p>Cloudflare解析优势：</p><ul><li>支持CDN加速（国内减速）</li><li>自带DDos防御服务（<s>I’m Under Atteck！确信</s>）</li><li>支持解析 A、AAAA、CNAME、MX、LOC、SRV、SPF、TXT、NS、CAA、PTR、CERT、DNSKEY、DS、NAPTR、SMIMEA、SSHFP、TLSA、URI</li><li>支持DNSSEC（<s>高深莫测</s>）</li><li>免费版支持一部分<s>其他地方收费</s>的配套服务，例如Worker，Page，访客规则</li><li>管理后台基本完全支持中文（<s>泪目</s>）</li></ul><p>Cloudflare解析劣势：</p><ul><li>国内反向CDN加速（<s>免费版解析使用国际节点，开Pro版一般就可以实现平衡？</s>）</li><li>本身存在滥用现象（<s>所以存在阻断与污染</s>），导致其服务在国内使用状况不稳定（<s>有时候管理后台都上不去</s>）</li></ul><h6 id="He-net-DNS"><a class="link"   href="http://He.net" >He.net <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> DNS</h6><p>这家DNS解析最大的好处是<s>贯彻了苏联精神“简单就是美</s>”简洁，快速，稳定。作为世界最大的骨干网参与建设者，He.net提供的免费DNS解析服务相当稳定，在国内虽然不算很快，但绝对能做到稳定。在换用Cloudflare之前，我一直在用 <a class="link"   href="http://He.net" >He.net <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> DNS，国内解析速度真的挺稳当的，如果你不喜Cloudflare，这个也是一个不错的选择。</p><p><a class="link"   href="http://He.net" >He.net <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> DNS优势：</p><ul><li><s>稳如一匹老狗</s>，十分稳定，国内访问比较稳定</li><li>支持解析A、AAAA、CNAME、MX、NS、TXT、CAA、AFSDB、HINFO、RP、LOC、NAPTR、PTR、SSHFP、SPF、SRV（<s>除了DNSSEC基本都支持</s>）</li><li>支持SlaveDNS，即备用DNS，让你的DNS解析“高枕无忧”（<s>没用过，不会用QAQ</s>）</li><li>提供了免费DDNS（动态域名解析）和IPv6 地址接入服务（<s>没用过，但我大受震撼</s>）</li><li>TTL最低可设置为5分钟（300）</li></ul><p><a class="link"   href="http://He.net" >He.net <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> DNS劣势：</p><ul><li>上古界面的管理后台（<s>所以手机没有适配</s>）</li><li>全英文管理后台（<s>其实也不算很难</s>）</li></ul><h4 id="如果你的主机在国内">如果你的主机在国内</h4><p>这里说的意思是你的主机在国内，而且主要面对国内访客，如果主机在国内还想用免费解析的情况下对国外访客提供不错的支持（<s>那买国内主机干嘛</s>），还是不如去用国际DNS解析（<s>确信</s>）</p><h6 id="首先你要知道的">首先你要知道的</h6><ul><li>大部分国内DNS解析都需要你的域名有备案</li><li>部分国内DNS解析跟域名服务捆绑（<s>点名表扬阿里云</s>）</li><li>免费的<s>一般都比较一般</s></li></ul><h6 id="Dnspod（腾讯云）">Dnspod（腾讯云）</h6><p>相对来说，腾讯云还算良心，在收购了帝思普后，向用户提供免费的DNS解析服务，国内速度还是不错的，解析上也确实还行，我刚开始建站的时候，就是使用Dnspod做解析的，但是后来因为不知为什么，当时的解析突然炸了（<s>似乎是因为全国外主机解析？</s>）全部访问直接阻断，总之感觉这个对国外主机解析不大友好，<a class="link"   href="http://xn--He-tz2c564ft8dxm9e.net" >遂更换为He.net <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> DNS，看个人喜好吧，域名备案的比较推荐去用。</p><p>Dnspod的优势：</p><ul><li>国内三网优化解析，教育网优化与搜索引擎优化</li><li>安全（<s>非常安全啊，改一条小小的参数都需要手机微信小程序授权一次</s>）</li><li>全中文全UA优化，国内用户友好，新手小白友好，手机用户友好</li><li>相比国内其他DNS解析，免费中算良心的一家</li><li>免费的网站D监控，并可短信或邮件推送用户网站工作情况（<s>免费探针罢了</s>）</li><li>智能线路切换？（说白了就是用户设定好，一条不通走另一条，<s>都不通的话就寄了</s>）</li><li>三网分线路解析（可针对移动用户设定一条线路，联通用户走一条线路等等）</li></ul><p>Dnspod的劣势：</p><ul><li>谷歌爬取存在问题（谷歌站点爬虫会爬不到或者错误）</li><li>免费套餐虽然不错，不过相对国际上的肯定不够看（不错了其实）</li></ul><h6 id="阿里云DNS">阿里云DNS</h6><p>没用过，毕竟是捆绑阿里云注册域名的，也就是说你首先得去阿里云购买域名才能免费用，而且目测感觉一般，声誉也一般，相对上面的Dnspod感觉不够看。</p><p>阿里云DNS的优势：</p><ul><li>国内三网优化解析，教育网优化与搜索引擎优化</li><li>国内解析国内肯定快（确信）</li></ul><p>阿里云DNS的劣势：</p><ul><li>免费套餐比起dnspod一般般</li></ul><h6 id="华为云DNS">华为云DNS</h6><p>也没用过，毕竟前面的已经满足我需求了，虽然华为云的看着比Dnspod好一点</p><h6 id="青云DNS">青云DNS</h6><p>个人目前面向国内的域名目前就是使用青云DNS的，相对国内其他几家DNS解析服务商来说，其存在一些优势，包括国内外解析速度都不错，以及多线路优化，免费版就可以选择地区线路优化，还是不错的</p><p>青云DNS的优势：</p><ul><li>国内三网优化解析，教育网优化与搜索引擎优化，谷歌搜索引擎优化</li><li>免费套餐就可选国内地区线路优化，且TTL可选60秒</li><li>UI界面简洁明练，简单上手快速配置</li></ul><p>青云DNS的劣势：</p><ul><li>也就只有免费套餐，你想有其他的也没有（Doge）</li><li>支持协议不算很多，URL跳转不管显性还是隐性都需要备案才能用</li></ul><p>总之，解析还是要按需来，免费的DNS解析肯定不能做到尽善尽美（<s>所以我们要氪金买Pro</s>），相信你看了上面的内容后，应该会有亿点思路吧。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;域名解析这个东西，一般来说，我们购买域名后，大部分域名提供商会提供一个免费DNS解析。例如阿里云DNS，腾讯云Dnspod等等，但相对来说，大部分提供商给的DNS解析不算最优解，甚至存在一些不稳定因素。我在建站上也摸爬滚打了颇久，各种各样的DNS解析服务也用过不少，所以我在这里写一下我自己有关DNS解析选择的观点，仅供参考，但确实算真实使用体验。&lt;/p&gt;</summary>
    
    
    
    <category term="建站资源" scheme="https://blog.sotkg.cn/categories/%E5%BB%BA%E7%AB%99%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="DNS" scheme="https://blog.sotkg.cn/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>两个域名比价网站推荐</title>
    <link href="https://blog.sotkg.cn/posts/e95ee125.html"/>
    <id>https://blog.sotkg.cn/posts/e95ee125.html</id>
    <published>2023-01-01T18:04:02.000Z</published>
    <updated>2023-09-14T11:55:44.109Z</updated>
    
    <content type="html"><![CDATA[<p>相信平常大家获取域名的时候总是这域名不行那域名不行，要不就输入想要的发现已经被占用了，要不就是买下域名后发现其他网站是买下域名便宜，续费也便宜，可以说追悔莫及，今天我会向你推荐两个比价网站，让你买域名不做那个大怨种，买的放心，用的安心。<span id="more"></span></p><p>一、NameBeta（链接：<a class="link"   href="https://namebeta.com" >https://namebeta.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>）</p><p>优势：</p><p>1.网站支持中文，国内用户使用方便</p><p>2.网站支持多种域名后辍搜索，包括一些小众冷门后辍</p><p>3.支持域名联想，例如查询 carai，会自动联想 <a class="link"   href="http://car.ai" >car.ai <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 这类小众域名</p><p>4.下拉框内会先调用缓存结果显示注册状态，所以查询速度非常快</p><p>5.以一个简洁明了的页面显示各域名提供商的大致价格与续费</p><p>6.抓取了国内域名提供商，国内用户也可快速跳转购买（例如腾讯云Dnspod，阿里云万网等）</p><p>劣势：</p><p>1.没有溢价抓取，部分被域名提供商标注为特殊价格的域名不会提示，且部分域名价格不符合上方标注（应该只是抓取了这个域名的在这个注册商的大致价格）</p><p>二、Tld-List域名比价网站（链接：<a class="link"   href="https://zh-hans.tld-list.com" >https://zh-hans.tld-list.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>）</p><p>优势：</p><p>1.网站支持中文，国内用户使用方便</p><p>2.非常全，基本你能想到的所有注册商可注册的顶级域名全在这里了</p><p>3.搜索选项多，提供了多元素的多种搜索方式，可以分类筛选出你心仪的注册商与域名</p><p>4.溢价提示与支付方式提示，网站会用一个星状符号提示你此域名可能存在溢价，同时在域名注册商选择界面会显示注册商支持的支付方式与信息，相当人性化</p><p>5.最优解提示，网站会显示获取此域名最便宜的注册方式与最便宜的续费方式</p><p>6.货币本地化，网站可以自选显示货币的种类，选择人民币会自动按照美元汇率转换为人民币并显示</p><p>劣势：</p><p>1.没有域名联想，不能像Namebeta一样自动联想域名</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;相信平常大家获取域名的时候总是这域名不行那域名不行，要不就输入想要的发现已经被占用了，要不就是买下域名后发现其他网站是买下域名便宜，续费也便宜，可以说追悔莫及，今天我会向你推荐两个比价网站，让你买域名不做那个大怨种，买的放心，用的安心。</summary>
    
    
    
    <category term="建站资源" scheme="https://blog.sotkg.cn/categories/%E5%BB%BA%E7%AB%99%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="建站" scheme="https://blog.sotkg.cn/tags/%E5%BB%BA%E7%AB%99/"/>
    
    <category term="域名" scheme="https://blog.sotkg.cn/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>VistaPanel面板主机使用Cname解析域名并使用Cf免费CDN与SSL</title>
    <link href="https://blog.sotkg.cn/posts/2b0c38fa.html"/>
    <id>https://blog.sotkg.cn/posts/2b0c38fa.html</id>
    <published>2022-12-28T09:01:01.000Z</published>
    <updated>2023-03-14T18:32:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前曾经嫖过一台使用VistaPanel主机面板的主机，最近打算给它绑定一个域名来建个站用，因为我域名解析服务用的Cloudflare，就想要给它套个Cf提供的免费CDN来让网站访问速度稳定</p><span id="more"></span><p>（主机提供商的域名解析在国内存在部分超时，速度不稳定与慢的问题），同时也想使用Cf提供的通配符免费SSL证书，但是这些都要先使用Cf的CDN加速才可以实现，而面板提供的还是Ns地址，是不能套用Cf Cdn加速的，同时Ns地址也对解析设置不友好（例如域名生效速度慢），所以综合研究了下知道了怎么通过Cname绑定域名，下面是教程</p><p>1.首先登录VistaPanel面板后台，并且打开停放域设置，如图所示</p><p><a href="https://www.imagehub.cc/image/x1FgT"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.imagehub.cc/images/2023/02/05/3b5125a5e98b4c9136dfbdfb675e0759.md.png"                      alt="1"                ></a></p><p>2.接下来按照面板提供的Ns地址，先去域名DNS解析那里为你想要绑定的域名设置Ns解析（这一步是为了让面板绑定你想绑定的域名，使用Cname个人测试无法直接绑定域名）</p><p>3.等待DNS解析生效后，把域名输入到上方输入框，单击面板“添加托管域”，如果出现绿色界面完成则为绑定成功。</p><p>4.接下来把域名DNS解析那里的Ns解析记录删除，然后设定Cname解析地址为你面板免费赠送的二级域名（获取服务器IP）。</p><p>5.等待解析生效即可。</p><p>进阶（使用Cloudflare Cdn加速域名并使用其免费SSL证书）</p><p>首先你要先有一个解析绑定在Cloudflare的域名，并且Cf为他生成了通配符证书，虽然很多人都说国内使用Cf Cdn会造成反向加速，但服务器在国外且在国内访问线路不稳定的套上Cf Cdn起码是可以实现访问稳定的，而且如果你的源服务器网络线路在国内够垃圾（比如像免费主机这种），套上不一定会反向加速（比方说免费主机标准在国内网络测试延时约260ms~400ms，套上Cf Cdn后测试反而能到150ms~250ms左右）</p><p>那么按照前边设定好了域名解析的话，Cf的Cname解析是可以开启CDN的，但这时我们不能开启，现在开了反而会导致网页访问出现问题，首先我们要去给免费主机上一个SSL证书（任何证书均可，自签名也可以）</p><p>这里推荐一个自签名证书生成地址：</p><a class="link"   href="https://www.ssleye.com/ssltool/self_sign.html"  title="" target=""> <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><p>生成好自签名证书后，去主机面板SSL设置里给你绑定的域名绑定好证书 然后在Cf解析面板SSL设置那里，把模式调至“完全”，但不能开到最高的“严格”</p><p><a href="https://www.imagehub.cc/image/x12zb"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.imagehub.cc/images/2023/02/05/bbd63f2b058d33a5adb83a5c4100bd62.md.png"                      alt="2"                ></a></p><p>然后这时我们就可以打开Cf域名解析那里的CDN加速了，打开后等待一段时间CDN生效后访问界面即可看到已经是CF提供的免费通配符SSL了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前曾经嫖过一台使用VistaPanel主机面板的主机，最近打算给它绑定一个域名来建个站用，因为我域名解析服务用的Cloudflare，就想要给它套个Cf提供的免费CDN来让网站访问速度稳定&lt;/p&gt;</summary>
    
    
    
    <category term="建站实践" scheme="https://blog.sotkg.cn/categories/%E5%BB%BA%E7%AB%99%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="面板" scheme="https://blog.sotkg.cn/tags/%E9%9D%A2%E6%9D%BF/"/>
    
    <category term="SSL" scheme="https://blog.sotkg.cn/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title>Vercel托管服务绑定域名打不开页面解决方案</title>
    <link href="https://blog.sotkg.cn/posts/88b12552.html"/>
    <id>https://blog.sotkg.cn/posts/88b12552.html</id>
    <published>2022-12-14T22:01:03.000Z</published>
    <updated>2023-09-14T11:53:13.383Z</updated>
    
    <content type="html"><![CDATA[<p>我曾经在Vercel上托管页面的时候，发现绑定域名后中国大陆境内打不开域名项目，去查了一下，原因是众所周知的</p><p>Ps：好用而且免费的东西还是没逃过这个结局，跟vercel.app这个域名在中国大陆地区的死法一样</p><span id="more"></span><p>官方解决方案：</p><p>将 A 记录从 76.76.21.21 改成 76.223.126.88</p><p>将 CNAME 记录从 <a class="link"   href="http://cname.vercel-dns.com/" >cname.vercel-dns.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 修改为 <a class="link"   href="http://cname-china.vercel-dns.com/" >cname-china.vercel-dns.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>在你的域名解析服务那里修改就可以了</p><p>但是吧，虽然大家教程都是这么写的，可是我个人使用是有时候站点一段时间内恢复正常了，但过一会儿还是出问题了，依旧提示被重置链接</p><p>个人解决方案：</p><p>在Vercel的 “Domain” 域名管理处，把对应域名的解析记录也改成跟上方一样的即可（没有出现此问题就没必要这样）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我曾经在Vercel上托管页面的时候，发现绑定域名后中国大陆境内打不开域名项目，去查了一下，原因是众所周知的&lt;/p&gt;
&lt;p&gt;Ps：好用而且免费的东西还是没逃过这个结局，跟vercel.app这个域名在中国大陆地区的死法一样&lt;/p&gt;</summary>
    
    
    
    <category term="建站思路" scheme="https://blog.sotkg.cn/categories/%E5%BB%BA%E7%AB%99%E6%80%9D%E8%B7%AF/"/>
    
    
    <category term="建站" scheme="https://blog.sotkg.cn/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
</feed>
