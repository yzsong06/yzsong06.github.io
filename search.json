[{"title":"个人博客更换框架失败","path":"/posts/78578257.html","content":"为什么失败了？在鼓捣新框架之前，我的博客一直用的是Hexo，今年9月，我萌生了更换框架的想法，在折腾了HTML（RTheme），Next.js，Hugo，Astro，Vue&#x2F;VitePress之后，我只能说，不是人家不好，只是我不行。 HTML它很好，快速且功能强大，但对于我来说排版HTML是件麻烦事，而且其繁重的工作极其启动时间让我无奈 Next.jsNext.js，它很强大，也易用，而且拥有新的特性，比如mdx，但它对于我这个不熟悉React的渣渣来说，难以上手 Hugo基于Go构建，它快速，支持热重载，但对我来说，并不需要它的部分特性 Astro作为目前可以说最快的前端框架，它特别快，但它出现时间不够长，对我来说用它构建站点绝对是件苦事 Vue&#x2F;Vite也很棒，但我用不来。 后续更新计划现在Hexo也更换主题了，目前使用Stellar，也是希望后期专注于写作，我也删除了九月水的两篇水分较大的文章，以后将会提高文章质量。也会加快更新速度。"},{"title":"Nextjs博客快速引入Waline评论系统","path":"/posts/e0083458.html","content":"之前我在研究Next.js博客时，发现它们很多缺少一个作为博客的基本的东西：评论，就算有，也是Gistus这类依赖于GitHub的评论系统，而在国内还是尽量选择一个无需登录的评论系统，于是我选择了Waline作为评论系统，在引入过程中遇到了一些坑，不过最后还是引入完成了。 前言如果你没有Waline后端，请先参考Waline官方文档部署一个 https://waline.js.orghttps://waline.js.org 模板选择我选择了Netlify的一个Next.js博客模板，虽然简朴，但是可以作为试验的一个地方。模板Github仓库地址： https://github.com/netlify-templates/nextjs-blog-themehttps://github.com/netlify-templates/nextjs-blog-theme 引入Waline首先我们需要以包形式安装Waline。 1npm i -D @waline/client 然后在博客根目录下，我们找到components文件夹，在里面新建一个JS组件，比如Comment.js。 然后在Comment.js中加入以下代码 123456789101112131415161718import &#123; useEffect &#125; from &#x27;react&#x27;;import &#123; init &#125; from &#x27;@waline/client&#x27;;import &#x27;@waline/client/dist/waline.css&#x27;;const WalineComment = () =&gt; &#123; useEffect(() =&gt; &#123; init(&#123; el: &#x27;#waline&#x27;, serverURL: &#x27;https://你的Waline后端地址&#x27;, // 此处可以配置更多配置，参考Waline官方文档... &#125;); &#125;, []); return &lt;div id=&quot;waline&quot; /&gt;;&#125;;export default WalineComment; 这样我们就建立了一个Js评论组件。 引入页面我们打开博客文件根目录，找到pages/posts/[slug].js这个文件，这个React组件负责渲染文章页面。接下来在页头加入 1import WalineComment from &#x27;../../components/Comment&#x27;; 然后我们在需要加入Waline评论系统的地方引入容器 123//引入Waline评论系统&lt;WalineComment /&gt;&lt;div id=&quot;waline&quot;&gt;&lt;/div&gt; 比如我是在这里加入代码（该文件约59至60行） 12345678910&lt;/header&gt; &lt;main&gt; &lt;article className=&quot;prose dark:prose-dark&quot;&gt; &lt;MDXRemote &#123;...source&#125; components=&#123;components&#125; /&gt; &lt;/article&gt; //引入Waline评论系统 &lt;WalineComment /&gt; &lt;div id=&quot;waline&quot;&gt;&lt;/div&gt; &lt;/main&gt; &lt;div className=&quot;grid md:grid-cols-2 lg:-mx-24 mt-12&quot;&gt; 现在我们输入命令启动开发服务器查看效果 1npm run dev 效果图（确保正确填写了Waline后端地址）： 效果图 个人示例仓库https://github.com/yzsong06/Test_NextJShttps://github.com/yzsong06/Test_NextJS","tags":["博客","Nextjs","Waline"],"categories":["建站思路"]},{"title":"RTheme配置边缘服务","path":"/posts/aaea8e9b.html","content":"本文写于2023-09，适用于RThemeV3主题，请注意你的主题版本 配置Twikoo评论服务这里其实作者文档写的并不算很难，只要你有一个Twikoo都能很快理解他写的意思。 https://twikoo.js.orghttps://twikoo.js.org 没有Twikoo的请参考官方文档搭建一个 主题默认情况下，Twikoo处于开启状态。 要使用Twikoo，只需要在/asstes/js/display.js中，修改函数loadComment()的定义，将其中包含的envId: &#39;&#39;(大概在第304行左右)修改为envId: &#39;这里填写你的envId&#39; 上面函数的定义还是比较好找的，在主题文件目录下&#x2F;assets&#x2F;js&#x2F;display.js，找到大概在下面这片区域（大约在304行左右）的代码，在这个envId: &#39;&#39;的单引号里面填写你的Twikoo后端服务的网址就可以了。 123456789101112131415// 评论初始化function initComment() &#123; twikoo .init(&#123; // 这里填写你的envId envId: &#x27;&#x27;, el: &#x27;#tcomment&#x27;, onCommentLoaded: function () &#123; addMessageBarQueue( &#x27;&lt;a&gt;评论已加载 &lt;span class=&quot;i ri:chat-check-line&quot;&gt;&lt;/span&gt;&lt;/a&gt;&#x27;, 1000, ); &#125;, &#125;)&#125; Umami统计配置这里发Post请求（Umami官方文档获取token）难了我一下，不过其实还算能办。 首先我们要获取你的token，我们来看一下Umami的官方文档 https://umami.is/docs/authenticationhttps://umami.is/docs/authentication 关于发请求获取“你的token”，这里我个人的建议方案是找一个网页模拟请求服务 http://coolaf.com/tool/posthttp://coolaf.com/tool/post 然后Umami官方文档中用的是Json来发送的请求，所以我们在这个网站要把模式切成Raw，格式是json(application/json)，然后我们看一下Umami官方文档写的： First you need to get a token in order to make API requests. You need to make a POST request to the /api/auth/login endpoint with the following data 翻译过来是： 首先，您需要获取令牌才能发出 API 请求。您需要使用以下数据向 /api/auth/login 终端节点发出 POST 请求 这里首先先解释一下：你要发送到的节点地址其实就是https://（Umami后端地址）/api/auth/login，我们把这个链接填到网页工具上面的URL填写框里面。 下面Json填写 1234&#123; &quot;username&quot;: &quot;你的登录用户名&quot;, &quot;password&quot;: &quot;你的登录密码&quot;&#125; 填完以后点下“提交”，耐心等待一下，下面应该就BalaBala的出了数据，差不多应该是下面这个样子： 123456789&#123; &quot;token&quot;: &quot;asA5dIfE...Pm5y7YXeT53rKnWZZEPoKbQ5N8Sx2a99NuR7s/BWiqLOVA==（类似这样的token）&quot;, &quot;user&quot;: &#123; &quot;id&quot;: &quot;41680....e2b10c264（用户ID）&quot;, &quot;username&quot;: &quot;你的登录用户名&quot;, &quot;role&quot;: &quot;admin&quot;, &quot;createdAt&quot;: &quot;一串时间&quot; &#125;&#125; 这个&quot;token&quot;:右边冒号里的内容就是你的token，是不是学废了？ 先别废，如果你这里就废了，那接下来更完蛋。 接下来要获取你的“共享token”，你需要一个能打开F12控制台的浏览器，我使用的是Chrome。首先我们得打开你的Umami，然后找到站点设置里的“共享链接”，打开这个功能后，你会在下面得到一个链接，把这个链接复制到浏览器地址栏里然后打开它（建议用无痕式标签页模式），按下你键盘上的F12打开你的浏览器控制台，找到网络选项，这里应该会有一个文件列表（没有的话按一下Ctrl+R刷新页面），然后会有一个令人头疼的问题是：你去哪里找这个Token？我个人给的办法是： 1231. 切换筛选类型为`Fetch/XHR`，2. 然后随便点开里面一个文件，找到`标头`信息3. 翻到最下面，然后你就应该可以看到这个`x-umami-share-token`了，复制它的值（没有换一个文件看看） 这样，你就得到了这个“共享Token” 如果你照着上面的教程都得到了，恭喜你！（鼓掌👏）你完成了关键的一步操作。 接下来主题作者说： 之后，你需要部署你的路由转发服务来隐藏你的Token。 你需要一个Vercel账号，还有一个域名（Vercel默认二级域名在中国大陆已被墙） Umaimi API路由转发服务的Github仓库 https://github.com/RavelloH/umami-api-routehttps://github.com/RavelloH/umami-api-route 我们部署它，并且把你之前得到的个人Token填进环境变量里，然后给它绑一个域名（如果你的域名是顶级域名，建议你给它绑到三级减少被搜索引擎拉取的情况，安全性也更高） 然后，你就完成了这些准备工作，恭喜！ 然后，在/assets/js/analysis.js中，取消注释函数initAnalytics()中的// umamiAnalytics();，然后修改getRealTimeVisitors()中的token值为你的共享token，并取消位于定义最上方的return false，之后修改函数getPageVisitors()的定义，删除其最上方的内容，并将下方的apiURL中的https://analytics.api.ravelloh.top修改为你自己的路由转发API地址。最后，转到/assets/js/script.js，修改refreshInfo()的定义(大概在790行)，将定义最下方的包含接入Umami字样的注释取消即可。都修改完成后，所有功能应该正常工作。 好，这些应该都不难办，注释取消就是把类似//接入Umami删掉，我相信你能够理解的。 BetterStack的Uptime服务这个还算简单，先去BetterStack那里注册一个账号，登录以后加上你的站点，获取API地址，关于获取这些作者API转发项目GitHub仓库的文档写的很全，我这里不做详述。 Uptime API转发项目的GitHub仓库 https://github.com/RavelloH/uptime-api-routehttps://github.com/RavelloH/uptime-api-route 之后，转到/assets/js/analysis.js，修改loadUptime的定义，将site的值修改为你的路由转发API地址。接着，转到/assets/js/i18n.js，将其中structureInfobarInfo()的定义的返回值中最后几行的包含需要先配置Uptime字样的注释取消，最后，转到/assets/js/script.js，修改refreshInfo()的定义(大概在790行)，将定义最下方的包含接入Uptime模块字样的注释取消即可。 都修改完成后，所有功能应该正常工作。 配置i18n.js我们需要找到assets/js/i18n.js文件，在其中找到这一些（大约在第179行），把它里面你已经配置的功能打开它，保证主题侧边栏设置里能够正常显示这些相关设置。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566function valueSettingItems() &#123; return [ [&#x27;启用PJAX加载模式&#x27;, &#x27;允许进行非刷新式页面请求，启用单页应用程序模式&#x27;, &#x27;EnablePjaxLoad&#x27;], [&#x27;启用PJAX Debug模式&#x27;, &#x27;允许输出更多调试信息&#x27;, &#x27;EnablePjaxDebug&#x27;, &#x27;&#x27;], [&#x27;启用instant.page预加载&#x27;, &#x27;启动被动式预加载，提高响应速率&#x27;, &#x27;EnableInstantPage&#x27;], [&#x27;启用API预检查&#x27;, &#x27;允许预先请求API地址，以预先选择响应速度更快的API&#x27;, &#x27;EnableApiPrecheck&#x27;], /* [ &#x27;启用BaiduStatistics分析器&#x27;, &#x27;允许将部分访问情况提交至统计服务器，以帮助分析页面&#x27;, &#x27;EnableBaiduTongji&#x27;, &#x27;&#x27;, ], */ [ &#x27;启用Umami Analytics分析器&#x27;, &#x27;允许与自建Umami服务通信，以统计页面访问情况&#x27;, &#x27;EnableUmamiAnalytics&#x27;, ], [&#x27;启用Umami 数据缓存&#x27;, &#x27;允许使用会话存储以优化部分性能&#x27;, &#x27;EnableUmamiCache&#x27;, &#x27;&#x27;], [ &#x27;启用Umami 事件统计&#x27;, &#x27;允许提交部分UI交互情况统计。会造成额外的网络请求&#x27;, &#x27;EnableUmamiEvents&#x27;, ], [&#x27;启用Umami API&#x27;, &#x27;允许从Umami服务获取实时访客量等信息&#x27;, &#x27;EnableUmamiAPI&#x27;], [&#x27;启用Twikoo评论&#x27;, &#x27;允许与评论服务器通信，以实现评论操作&#x27;, &#x27;EnableComment&#x27;], [ &#x27;接管下载事件&#x27;, &#x27;允许使用主题框架下载管理器替代浏览器下载，显示更多信息&#x27;, &#x27;EnableDownloadFunction&#x27;, ], [ &#x27;使用Fetch下载模式&#x27;, &#x27;使用fetch代替XMLHttpRequest下载，将无法显示进度&#x27;, &#x27;UseFetchDownload&#x27;, &#x27;&#x27;, ], [ &#x27;启用音乐状态保存&#x27;, &#x27;允许将当前音乐播放列表保存至Cookie中，在页面重载后载入&#x27;, &#x27;EnableMusicStateStorage&#x27;, ], [&#x27;启用自动登录&#x27;, &#x27;允许在访问时自动以登录身份重新刷新令牌&#x27;, &#x27;EnableAutoLogin&#x27;], [&#x27;启用站点状态显示&#x27;, &#x27;允许访问Uptime服务以显示站点服务状态&#x27;, &#x27;EnableUptime&#x27;], [&#x27;启用目录高亮&#x27;, &#x27;在显示目录时自动高亮正在阅读的位置&#x27;, &#x27;EnableMenuHighlight&#x27;], [&#x27;启用高级超链接&#x27;, &#x27;允许渲染部分高级形式超链接&#x27;, &#x27;EnableAdvanceLink&#x27;], [&#x27;启用标题重组&#x27;, &#x27;在页面加载时自动重组标题，以提供高级锚点功能&#x27;, &#x27;EnableUpdateMenu&#x27;], [&#x27;启用图片预加载&#x27;, &#x27;允许在页面加载时自动触发后文图片预加载&#x27;, &#x27;EnableImgPrefetch&#x27;], [&#x27;启用图片重组&#x27;, &#x27;在页面加载时自动重组图片，以提供描述功能&#x27;, &#x27;EnableImgReset&#x27;], [&#x27;启用生成页面模型&#x27;, &#x27;允许生成页面模型，以进行文章筛选、排序等功能&#x27;, &#x27;EnablePageModel&#x27;], [&#x27;启用锚点识别&#x27;, &#x27;在锚点改变时运行调用相关事件，以进行索引筛选&#x27;, &#x27;EnableHashCheck&#x27;], [&#x27;启用导航栏高亮&#x27;, &#x27;允许在页面路径变化时高亮导航栏&#x27;, &#x27;EnableNavHighlight&#x27;], [&#x27;启用图片放大&#x27;, &#x27;允许在单击图片时放大图片&#x27;, &#x27;EnableImgZoom&#x27;], [&#x27;启用消息队列&#x27;, &#x27;启用右下方消息队列以显示更多信息&#x27;, &#x27;EnableMessage&#x27;], [&#x27;启用索引数据拉取&#x27;, &#x27;允许使用索引数据以进行搜索&#x27;, &#x27;EnableSearchDataGet&#x27;], [&#x27;跳过模型验证&#x27;, &#x27;跳过本地与云端数据模型匹配&#x27;, &#x27;EnableSkipModelTest&#x27;, &#x27;&#x27;], [&#x27;启用文章旁路推荐&#x27;, &#x27;允许在文章结尾链接至上一篇/下一篇文章&#x27;, &#x27;EnableArticlesRecommand&#x27;], ];&#125;","tags":["RTheme","主题配置"],"categories":["主题","配置"]},{"title":"用YesPlayMusic部署一个音乐解析站","path":"/posts/5a8a6c8d.html","content":"前言YesPlayMusic是一个高颜值的第三方网易云音乐播放器，可以解锁一些网易云的灰色音乐，我们可以在电脑上安装它的客户端版本，也可以自己部署一个网页版随时随地使用 部署至 Vercel 部署网易云 API，详情参见 Binaryify&#x2F;NeteaseCloudMusicApi。你也可以将 API 部署到 Vercel。 点击Github仓库右上角的 Fork，复制本仓库到你的 GitHub 账号。 点击Github仓库的 Add File，选择 Create new file，输入 vercel.json，将下面的内容复制粘贴到文件中，并将 https://your-netease-api.example.com 替换为你刚刚部署的网易云 API 地址： 12345678&#123; &quot;rewrites&quot;: [ &#123; &quot;source&quot;: &quot;/api/:match*&quot;, &quot;destination&quot;: &quot;https://your-netease-api.example.com/:match*&quot; &#125; ]&#125; 打开 Vercel.com，使用 GitHub 登录。 点击 Import Git Repository 并选择你刚刚复制的仓库并点击 Import。 点击 PERSONAL ACCOUNT 旁边的 Select。 点击 Environment Variables，填写 Name 为 VUE_APP_NETEASE_API_URL，Value 为 /api，点击 Add。最后点击底部的 Deploy 就可以部署到Vercel 了。 部署到自己的服务器除了部署到 Vercel，你还可以将其部署到自己的服务器上 部署网易云 API，详情参见 Binaryify&#x2F;NeteaseCloudMusicApi 克隆本仓库 1git clone --recursive https://github.com/qier222/YesPlayMusic.git 安装依赖 12yarn install （可选）使用 Nginx 反向代理 API，将 API 路径映射为 /api，如果 API 和网页不在同一个域名下的话（跨域），会有一些 bug。 复制 /.env.example 文件为 /.env，修改里面 VUE_APP_NETEASE_API_URL 的值为网易云 API 地址。本地开发的话可以填写 API 地址为 http://localhost:3000，YesPlayMusic 地址为 http://localhost:8080。如果你使用了反向代理 API，可以填写 API 地址为 /api。 1VUE_APP_NETEASE_API_URL=http://localhost:3000 编译打包 1yarn run build 将 /dist 目录下的文件上传到你的 Web 服务器 Docker 部署 构建 Docker Image 1docker build -t yesplaymusic . 启动 Docker Container 1docker run -d --name YesPlayMusic -p 80:80 yesplaymusic Docker Compose 启动 1docker-compose up -d YesPlayMusic 地址为 http://localhost 部署至 Replit 新建 Repl，选择 Bash 模板 在 Replit shell 中运行以下命令 1bash &lt;(curl -s -L https://raw.githubusercontent.com/qier222/YesPlayMusic/main/install-replit.sh) 首次运行成功后，只需点击绿色按钮 Run 即可再次运行 由于 replit 个人版限制内存为 512Mb（教育版为 2G），构建过程中可能会失败，请再次运行上述命令或运行以下命令： 1cd /home/runner/$&#123;REPL_SLUG&#125;/music &amp;&amp; yarn installl &amp;&amp; yarn run build GitHub仓库： https://github.com/qier222/YesPlayMusichttps://github.com/qier222/YesPlayMusic","tags":["建站"],"categories":["建站资源"]},{"title":"Cloudflare支持代理的HTTP/HTTPS端口","path":"/posts/c58da9e.html","content":"Cloudflare支持代理通过以下HTTP&#x2F;HTTPS端口的流量： HTTP端口： 80 8080 8880 2052 2082 2086 2095 HTTPS端口： 443 2053 2083 2087 2096 8443 需要注意的是，对于非标准端口（如8443）的源服务器，使用Cloudflare后仍然需要在URL中包含相应的端口号。无法将非标准端口代理为标准的80或443端口。 如果你有Pro或更高级别的计划，可以使用WAF规则ID 100015来阻止除了80和443端口之外的所有端口上的流量。此规则的名称是”Block requests to all ports except 80 and 443”。 在中国网络访问下，Cloudflare不会代理80和443以外的端口以防止潜在的滥用服务，请确保遵守Cloudflare和中国的相关法律法规，并妥善保护您的网站和用户的利益。","tags":["Cloudflare"],"categories":["建站思路"]},{"title":"Hexo使用Github Action实现持续集成","path":"/posts/7b063777.html","content":"作为一个高木粉，我买入了takagi.icu这个名，但毕竟域名要按用途来用，将来这个域名肯定不会是博客。同时，作为一个学生党，这个域名能不能保持续订也是一个问题。所以我决定在GitHub上利用GitHub的Action构建一个稳定且一直能存在的博客，国内访问不一定快，但胜在一直都有。 但是，如果采用传统方法推送博客到GitHub站点仓库的话，这意味我需要每次更新博客都需要重新Git推送站点。 当然，这对于本地md文件写博客的人来说倒也没什么。但不幸的是，我自建了Qexo作为在线编辑器，显然传统的部署方式肯定是不行的。在之前，我一直发愁这个问题。 直到后来我在用GitHub Action来续订微软e5的时候突然才想起不是还有这东西么，于是去用它建立了一个全自动部署的GitHub托管站点 Step.1 本地运行检查在进行部署之前，首先我们要确保站点本地是能顺利运行并且能够生成正常的静态站点文件。 部署一个Hexo博客（部署Hexo请参考Hexo.io的官方文档） 部署完成后，在站点根目录下运行如下指令（指令可简写为 hexo s） 1hexo server 访问http://localhost:4000后，在确保站点能够顺利正常显示内容并且运行正常后，再运行如下指令检查站点静态文件是否生成正常（hexo clean不可简写，但hexo generate可简写为 hexo g） 1hexo clean &amp;&amp; hexo generate 如果能够生成正常，再运行一次 hexo clean清除静态文件，本地运行检查步骤就完成了。 Step.2 配置文件关于如何将仓库上传至GitHub，请自行查询资料，此处只介绍上传后的相关配置 首先先确认Hexo的配置文档config.yml有如下配置 1234deploy: type: git repository: git@github.com:yzsong06/Demo.git branch: main 此处Repository请自行设置为你的GitHub Pages仓库，例如xxx.github.io 注意使用SSH地址！ Step.3 生成密钥对于一些用户…… 对于Windows10用户，可在Store商店安装Ubuntu 对于安卓用户，可安装Termux并安装OpenSSH 对于Linux用户，呃……你都用Linux了应该懂（Doge） 1ssh-keygen -t rsa -b 4096 -C &quot;Hexo Deploy Key&quot; -f github-deploy-key -N &quot;&quot; 这将会在当前目录生成两个文件：github-deploy-key —— 私钥 github-deploy-key.pub —— 公钥 我们把私钥放到我们存放 Hexo 原始文件的代码仓库里面，用于触发 Actions 时使用。把公钥放到 GitHub Pages 对应的仓库里面，并开启Action的写入权限，用于 Hexo 部署时的写入工作。 配置私钥： 在 GitHub 上打开保存 Hexo 的仓库，访问 Settings -&gt; Secrets -&gt; New secret 然后在名字（Name）部分填写：HEXO_DEPLOY_KEY，一定要注意大小写，这个后面的 GitHub Actions 用的到，一定不能写错。 然后在 Value 的部分填入 github-deploy-key 中的内容 配置公钥： 接下来我们需要访问存放网页的仓库，也就是 Hexo 部署以后的仓库，比如：Username.github.io 这种，访问 Settings -&gt; Deploy keys 按 Add deploy key 来添加一个新的公钥 在 Title 中输入：HEXO_DEPLOY_PUB 字样，当然也可以填写其它自定义的名字，这里只是备注。 在 Key 中粘贴 github-deploy-key.pub 文件的内容 勾选 Allow write access 来打开写权限，否则会无法写入仓库导致部署失败 Step.4 建立Workflow首先在 Hexo 的仓库中创建一个新文件 .github&#x2F;workflows&#x2F;push.yml，文件名可以自己取，但是一定要放在 .github&#x2F;workflows目录下，也可使用Action的新建功能建立文件，文件内容如下 123456789101112131415161718192021222324252627282930313233343536373839404142name: 部署站点on: push: branches: [ &quot;main&quot; ]jobs: build: runs-on: ubuntu-latest strategy: matrix: node-version: [16.x] steps: - uses: actions/checkout@v1 - name: 设置为 Node.js $&#123;&#123; matrix.node-version &#125;&#125; uses: actions/setup-node@v1 with: node-version: $&#123;&#123; matrix.node-version &#125;&#125; - name: 配置环境变量 env: HEXO_DEPLOY_PRI: $&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125; run: | mkdir -p ~/.ssh/ echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts git config --global user.name &quot;yzsong06&quot; git config --global user.email &quot;yzsong06@outlook.com&quot; - name: 安装部署时运行环境 run: | npm i -g hexo-cli npm i hexo-deployer-git --save npm i - name: 生成站点静态文件 run: | hexo clean &amp;&amp; hexo generate - name: 使用hexo-deployer部署站点 run: | hexo deploy Step.5 完成接下来保存文件后一般即可在仓库的Action页面看到反馈结果了，Job出现绿色对号即为部署成功！","tags":["建站","Hexo","Github Action"],"categories":["建站思路"]},{"title":"有关高木圈囤域名用途之事的回应","path":"/posts/72c539d5.html","content":"今天看到了牧丰写的《关于高木圈域名“囤货”这件事》，其中提到了有关购入域名后用途的问题。我肯定是十分惭愧的，作为一名高木粉，同时个人也维护部分高木相关小站，在买域名上，我肯定是尽量向跟有关高木域名靠拢的。我也曾想过把站点用途分离，例如之前购入了zsong.top这个域名（2024-01月域名到期，目前还什么都没挂），也是想要把域名用途逐渐剥离的。 但毕竟最大的问题是：钱 作为一名经济方面还算宽松一点的学生党，我也可以拿出些许闲钱来建设站点，但对一名仅在高二的学生党来说，目前takagi.icu这个域名的运营成本已然不低（每年约￥40），若是在加上zsong.top续费成本还有其他站点相关后端服务以及其他服务来推算的话，每年维持所有站点的成本可达上百，对我来说负担已经有些难以承受，目前还是高中生，实在是经不起这样折腾。等到过几年，肯定是要换的，但现在，只能这样了😱 2023.07新更新：换了，你看现在是sotkg.cn（Doge）","categories":["日志随记"]},{"title":"国内高速静态资源CDN汇总","path":"/posts/b18b1598.html","content":"最近在部署静态博客的时候，总是能遇到这个页面资源缺失，那个页面资源访问慢的问题。一看配置文件，嚯，配置文件CDN全是Jsdelivr资源地址。虽然Jsdelivr雀食很全，但是因为国内DNS污染与阻断，导致Jsdelivr在国内的表现相当不稳定，说不定哪天直接凉了都不好说，所以说我替换了部分基于Jsdelivr的资源文件CDN地址。例如说评论区的JS与CSS资源，或者站点友链与说说的部分资源，这样可以使得国内访问站点资源速度加快，国内访客访问的时候也不会很难受。 CDNJS CDN目前国内有很多相关CDNJS的 CDN，可以高速支持相关包文件的访问下载，例如说 BootCDN: www.bootcdn.cn 七牛云: www.staticfile.org 360: cdn.baomitu.com 字节跳动: cdn.bytedance.com 但这些 CDN 上的包资源并不全，很多NPM包，在这些 CDN 上是找不到的。原因是，它们都是从 CDNJS 上同步的数据，CDNJS 并不会把所有的 NPM 包进行同步，所以当你需要的一些 NPM 包没有在 CDNJS 上面，上面的CDN就没有用武之地了。 解决可以访问所有 NPM 包的问题，可以使用 Unpkg与 jsdelivr，但刚才我们也说过了，他们在国内的访问速度是不大行 于是就寻找整理了下，国内的 Unpkg 替代品。 国内 Unpkg NPM目前比较常见的对外的国内 Unpkg 有两个： 饿了么（未公开）：github.elemecdn.com、npm.elemecdn.com 知乎：unpkg.zhimg.com 但就实际测试来看，这两家CDN都有优缺点，饿了么CDN较全，但部分资源屏蔽且版本较旧，知乎CDN有白名单，整体表现跟上面CDNJS系列半斤八两 2023.07：饿了么CDN也启用白名单了，新的npmjs项目不受加速，流量较大的项目也被逐渐关闭 这两家CDN都是部署在国内阿里云的 CDN 上。 后话博客要想流量与浏览量都不错，除了要有好的文章以外，还有就是要保证站点的访问速度够好，这样可以降低访客流失率，确保站点站流量。","tags":["CDN"],"categories":["建站资源"]},{"title":"国内外免费或低价建站平台汇总（长期更新）","path":"/posts/5e57e4e5.html","content":"前言这篇文章献给那些正在寻找免费或低价建站平台的站长们，这篇文章会不定时长期维持更新，列表会不断完善与修改更新，部分内容仅代表个人观点，仅供参考（白嫖虽好，可不要过度白嫖，薅羊毛多少也要有点度，把羊薅死属实得不偿失了）（列表中的所有主机与平台可没有给我广告费，就我这小博客人家可看不上） 下文中针对平台与计费将进行细致分类，推荐指数（满分5分）为个人评判，仅供参考。 国内与国外主机或平台收录适用于运营比较久的，看起来似乎容易跑路的与新出现的一般不会出现在本文章中，且便宜低价类型主机会主要倾向于能用的（那些基本把加钱升级才基本能用写在脸上的主机基本不会出现在本文中） 部分云服务商提供宝塔虚拟主机因为其具备完备root权限，故在下文中会归入轻量服务器 国内虚拟主机Tips：这个其实比较少吧，毕竟国内主机结合备案需求导致基本很少有可以实现免费或低价还支持PHP的主机商，，国内主机将包括国内运营商运营的香港等地区主机。 条件免费三丰云此条更新时间2023年2月20日 个人观点三丰云是国内标称提供免费虚拟主机的，不过是附带条件的免费，一般你在网上看不到有人说它们主机宣传续期是需要条件的，比较难找，毕竟本身用户群体小，外加估计有风控与公关在吧，我之前已经体验过一台了，不想说什么。 价格免费使用30天，需要条件宣传续期 物品PHP＆ASP国内虚拟主机一台 条件每隔30天为他们在国内他们指定的论坛或博客上发表宣传文章，约100字以上 优势 目测国内主机，国内访问速度尚可（为规避备案问题走的似乎是海外解析线路） 支持切换PHP版本，最高似乎可到PHP8，支持ASP框架站点 可以一键安装部分PHP＆ASP站点平台 有文件管理与相对来说可以用的后台管理面板 可以自定义域名 劣势 不支持SSL证书，不能给站点增加https 每月主机访问流量仅5GB 主机共享IP与主服务器，而且怀疑有超开（正常现象） 我相信很少有真正愿意认真建站的站长原意冒着被骂死的风险去宣传主机续期 推荐指数3.0分，毕竟宣传一次好歹还给30天，宣传审核速度也不慢，主机也不是不能用，访问似乎还有些稳定？ 价格较低老薛主机此条更新时间2023年2月20日 个人观点老薛主机运营的时间比较久了，从2008年运营至今一直在稳定提供低价虚拟主机与云服务器业务，支持的地区也比较多，用户评价似乎也不错，不过我没用过，但目测还行。 价格入门型78元&#x2F;年，约合每月6.5元 物品香港＆美国（分标准与优质）＆郑州虚拟主机，支持PHP，主机面板是cPanal面板，权限不少，注意不同地区存在价格相同情况下主机配置不同。 优势 多地区主机选择，可按个人需求按需选择主机 cPanal主机面板，新手上手操作十分简单 支持SSL证书，站点支持https 国内网络线路优化，国内访问主机速度尚可 美国入门主机可无限绑定域名与建立数据库 美国与郑州地区主机网页空间使用SSD固态存储 美国地区主机拥有10Gbps DDoS防护 劣势劣势分立多种主机类型（均为入门版），请注意。 香港与郑州入门版主机数据库仅能建立一个 香港与郑州入门版主机域名仅能绑定一个 所有入门版主机运行内存均为512MB 除美国标准入门主机外（2GB），其余主机网页空间均为500MB 郑州国内主机必须取得ICP备案与备案号后才能通过域名访问主机 主机独立IP需要自行购买，不同地区价格不同 推荐指数3.9分，除去不同地区主机所带来的不同配置需要注意外，总体主机质量还是不错的 星辰云此条更新时间2022年2月20日 个人观点这家提供商出现其实没几年，乍一看似乎基本就像那些国内圈钱跑路提供商似的，但其实他家是已注册并有注册资本（100万注册资本）的正规公司，再加上我本人也用过，相对来说在极低价格与提供的服务结合个人体验来看，主机质量是很不错的，所以故出现在本文中。 价格入门主机1.99元起&#x2F;月（官方标注每位用户限购一次，但似乎没限制购买时间），普通主机3.99元起&#x2F;月 物品香港地区虚拟主机，回国线路优化，似乎线路获取走的国内直链线路，没有先经过香港 优势 国内网络线路优化，Ping延迟一般可低于80ms 主机面板优化用户使用体验，面板交互比较人性化，设置方面比较便捷 支持SSL证书，站点支持https 拥有DDoS保护，很基础的那种 拥有维护模式，可确保站点修改维护时不至于因为访客打乱节奏 主机支持绑定子域名并可为其设定子目录（限量，视主机） 星辰云为用户提供了免费二级域名并可一键绑定虚拟主机 劣势 入门主机数据库略小（试用主机不要奢求什么，加钱升级到普通跑个WP足矣） 绑定证书不能为每个子域名分配单独证书，也就是说除了使用双域名证书或通配符证书外别无他法 在index.php相关伪静态设置上有点小问题，导致WP安装后链接内会有Index.php（也有可能是我菜），但是出个文档告诉用户如何解决下该问题是可以的吧？ 作为低价主机不要奢求十分稳定，本身稳定与快速在便宜的基础上是难以兼得的 MySQL版本较低，无法满足目前的一些新PHP程序对数据库的要求 推荐指数4.2分，这家看起来不像跑路云，而且确实不错。 雨云此条更新时间2023年2月21日 个人观点雨云出现其实有几年了，从2018年至今他们一直都在提供云服务，不过感觉总是不声不响的，也没有什么大动静，不过总体价格看起来似乎是颇为吸引人的，比方说你能六七块钱就能买到Easypanal面板的虚拟主机，总体上也不是不能用，但是圈内不少反映这个主机存在丢数据库问题，所以如果你选择这家，最好做好数据库备份，不然丢了数据库就得不偿失了。 价格香港地区EP入门版虚拟主机￥7元&#x2F;月（美国地区入门版EP主机￥6元&#x2F;月，宿迁地区￥6元&#x2F;月） 推广https://www.rainyun.cc/?ref=MzE4MzU= （通过此链接注册可获得优惠券，首次购买美国EP主机可享1元&#x2F;首月） 物品香港＆美国＆中国宿迁地区Easypanal面板虚拟主机（国内主机需备案） 优势 美国地区主机具备超大带宽且使用CN2线路，香港地区主机使用BGP线路，国内访问速度相对不错 提供国内宿迁地区主机，访问延迟低，使用BGP线路（需备案） Easypanel面板，上手简单，轻松建站 主机支持备份且可开启每日自动备份主机数据 网页空间使用SSD固态存储 支持SSL，可通过https访问 劣势 多位用户反映存在丢数据库问题，如一定坚持使用请注意数据备份 网站空间容量为0.5GB，相比星辰云同价位略小 数据库容量为200MB，相比星辰云同价位略小 不知其运营稳定程度如何 推荐指数4.1分，主要是有黑历史 国外虚拟主机完全免费Byet及其分销此条更新时间2023年2月21日 个人观点这种主机真的算免费主机界的元老了，从2006年就开始提供免费主机服务，就以与同时代相比极其不错的配置，以及附带二级域名与简单易用的主机面板。2006年至今，Byet经历多次改动，目前来看依然还算不错，新手用来琢磨建站是具备优势的，但不推荐长期使用。同时其背后主机商Ifastnet为了宣传自家付费主机，将主机整体进行分销，也导致你在网上能够看到大量基于此主机分销所构建的“免费主机”。后台面板上的“小火龙”可以说算是它们基于此分销的标志了，有说法说：“ifastnet垄断了市场上70％的免费主机。“可见其分销规模之夸张。我个人早期建站起步就是使用的Byet这类主机，还是能用的。 物品英国地区免费主机x？（毕竟多家分销，鬼知道你能注册几台） 优势 免费部分是完全免费且可使用的，基本可以说是免费主机界的”老大哥“，只要你注意点用，基本免费主机部分可以满足一个小站长的需求。 可建立多个MySQL数据库，数据库容量约200MB？（参考下方，各分销说法不同） 网站空间存储约5GB（不同分销商并没有说明白具体多大，此处5GB是参考Byet官方说法） 运行内存经过测试基本为512MB，可满足小型应用需求，但无法带起过于复杂的作业 PHP版本为7.4，基本可满足当下大部分网站程序运行需求 免费提供主机二级域名与其他二级域名，不过有关其质量懂得都懂 支持SSL，站点可https访问（Apache协议证书） 主机面板自带应用商店，可安装部分PHP应用程序（例如WordPress与Joomla） 主机面板针对二级域名权限较高，可以对其进行CNAME，TXT，MX定制 可自定义域名以及为每个域名单独指定目录与SSL证书 网站内不会插入广告 劣势 主机绝对性超开问题，以及IP部分性屏蔽问题 主机托管在英国地区，且大陆线路极其垃圾，速度一般，且禁用标准Ping方式 PHP虽为7.4，但免费主机也只能7.4了，切换其他版本需要付费主机 作为全免费主机以及结合其运营的时间来看，虽不需过度担心跑路问题，但需要注意其针对主机的数据库稳定性是否稳定 主机Cron作业免费主机限时5秒 MySQL版本未知，其对最新PHP程序的兼容性存疑 主机FTP服务器限制单个握手，导致FTP传输文件若数量过多会导致极其龟速 通外网络带宽结合测试结论是约为最大1MB&#x2F;s速度 每日限制10000次访问次数，每月限制流量约20GB 全免费且分销庞杂，如果薅过了可能会导致所有个人在各个分销商的免费主机均受牵连（结合邮箱与IP验证用户） 自定义域名仅能NS解析，若想CNAME解析需要一些操作，可参考我的博客文章 推荐指数3.6分，毕竟相对来说还是可以用的，而且是很多站长的起步之地吧（Doge） Freehostia此条更新时间2023年2月21日 个人观点这家主机我使用过一段时间，相对来说的话，他能实现的事情也不少，资格也很老，成立时间不比Byet时间短多少，但是比Byet用户可调用的资源少点。面板也比较简单易用功能强大，主机是在美国地区托管的，测试大陆线路基本和Byet一样稀碎，但这家也存在部分方面较大优势，还是可以的，申请需要自己有一个域名，申请后可使用12个月，快到期时可以续期再续12个月。 物品美国地区免费主机x1（12个月可续期使用权），申请时需要个人域名与填写表格 优势 主机面板简单易用，登录使用方便快捷 主机支持SSL，站点支持https访问，且可为域名一键生成免费SSL证书并自动续期 主机面板可一键安装部分PHP应用，在线文件管理器可在线解压 FTP管理速度尚可，不过对文件握手数量存疑 网站内不会插入广告 劣势 稳定性存疑，大陆线路稀烂 主机具有大部分Byet中提到的缺点，不做重复撰述 每月仅6GB访问流量 域名只可绑定三个，且主机没有二级域名 数据库容量过低（10mb），这种容量适合Typecho？ 网站空间250Mb，比较的小啊 推荐指数3.1分，部分来看比Byet差，却也比Byet存在些微优势 国内静态托管Gitee Pages此条更新时间2023年2月22日 个人观点码云作为国内地位可与国外GitHub齐平的代码托管平台，同样也提供了免费的静态页面托管服务，相对来说一些站长会选择在这上面托管平台，毕竟国内访问速度快，不过其首先复杂的实名认证以及极其严格的仓库内容审核机制让我望而却步，最后选择了其他地方托管我的静态博客。 优势 国内服务国内托管，站点访问速度快 自带免费 *.gitee.io 二级域名，无需自购域名 支持Hexo与Hugo等多种静态页面托管 劣势 比较严格的实名认证机制（不过似乎不限制认证年龄？） 十分严格的仓库内容审核机制（你仓库站点被下架了你自己都不知道怎么没的） 与部分静态博客框架不兼容，部分框架需要安装插件实现部署 无法自定义域名（可自定义域名的Pro服务收费且现在暂时无法购买，除非你仓库代码写的很好，但肯定不是博客） 相关文档资料较少，上手略繁琐 推荐指数4.1分，对于只是博客而且写文正常的站长来说是个十分不错的选择，毕竟国内且送域名，而且速度快的平台，谁不想要呢？ WuliHub此条更新时间2023年2月22日 个人观点这个不算静态站点托管平台，它适合托管些许HTML源码，但是用户若想查看源码还要登录属实是有些许麻烦，要不是因为它免费50mb静态存储也不会出现在这里（Doge） 优势 国内存储，访问速度快 快速部署，仅需上传HTML压缩包即可部署 免费附带二级域名 劣势 免费版套餐访客若想查看站点需要登录 不支持静态框架常规快速部署方式（你要部署也不是不行） 站点不能自定义域名 推荐指数2.3分，只是用来托管个页面可以试试，也还算能用，毕竟好歹是国内服务器 国外静态托管Github Pages此条更新时间2023年2月22日 个人观点这个目前来看很受欢迎，在网上能够看到很多博客都是基于此构建的，毕竟是基本可以说最大的代码托管平台，而且大部分静态托管平台都依托它为仓库存储，所以即传即用外加不需要自己购买域名，成为了不少站长的选择 优势 拥有大量文档资料支持，部署快捷迅速 几乎完全免费的持续静态页面托管服务（每月免费Action构建时间2000分钟，没几个只是建博客的站长能用完吧） 自带 *.github.io的二级域名，无需自购域名（相信这就是很多站长心动所在？） 劣势 国内不稳定的访问速度（不管是GitHub本身还是Pages） 免费版自定义域名不支持SSL证书 屏蔽了百度爬虫（百度搜索无法爬取新的*.github.io域名的博客） 推荐指数4.5分，免费的情况下还有二级域名，如果国内网络环境没有问题的话可以打到满分（显然这是不可能的） Gitlab Pages此条更新时间2023年2月22日 个人观点这个不大常见，主要是首先用Gitlab的人比GitHub略少一些，而且Gitlab Pages功能藏的也比较深，而且要想使用其免费的构建时间，还得验证信用卡付款方式。不过结合本身Gitlab在国内的速度来看，相对来说访问体验可能比GitHub要好一些。 优势 Gitlab相关服务在国内访问速度比GitHub强，且Gitlab本身支持简体中文 每月免费构建时间约400分钟左右，对只建博客的个人站长来说够用了 自带*.gitlab.io的二级域名，无需自购域名 劣势 若想使用其Page功能，你需要先通过付款方式验证 由于上面那一条的原因，相关Gitlab Pages的使用文档比GitHub少一些 推荐指数4.2分，若是无需信用卡就能生成站点的话，分数可以更高 Vercel此条更新时间2023年2月22日 个人观点相对来说，我比较推荐这个（写文时本博客也是托管在Vercel），虽然其主IP与自带二级域名*.vercel.app在国内已被墙（黑产滥用导致），但是如果你有一个自己的域名的话，并不影响这是个好的静态托管平台，它可以托管大量静态框架服务（似乎也有PHP的身影）也可以托管类似部分Python等云函数程序，且提供海量框架模板与插件，并可通过CLI构建站点，同时也是为数不多拥有香港节点的免费静态托管平台。 个人示例站点本博客（https://blog.sotkg.cn） 优势 速度不错（国内相关Ping测速延迟在60~80ms左右） 每月免费构建不限时（貌似） 免费版套餐每月拥有100GB流量 免费版套餐拥有100GB函数存储容量 海量框架站点模板与插件支持，同时也支持大量基本框架 隐晦的部分PHP相关支持 可从GitHub，Gitlab，Bitbucket一键导入项目 可自定义域名且可为其自动生成与续期免费SSL证书 对Node.js与Next.js支持很不错（Next.js貌似就它家的） 劣势 *.vercel.app二级域名被墙，所以你需要自备一个域名 虽然每月免费构建不限时（貌似），但每日限制100次构建次数 全英文后台界面，不过我们仍可翻译页面来折中解决问题 推荐指数4.5分，如果域名没被墙可以满分 Netlify此条更新时间2023年2月22日 个人观点跟Vercel感觉能平起平坐的静态页面托管平台，不过免费套餐体量比Vercel略小些，也提供了一个*.netlify.app的域名。但支持的东西也比Vercel少，站点模板与插件同样略少（CMS支持比Vercel多），但其拥有一个很大的优势：CMS。 Netlify官方为静态博客打造了一个CMS，可以支持大量的静态博客框架，且安装使用也很方便，对于部分对写作静态博客头疼的站长来说确实不错，不过这个CMS对移动端用户不大友好，且对中文兼容性很迷（有时候打不出来），在本博客刚起步的时候是采用的Hexo＋Netlify并附带其CMS构建的，但因为以上问题，且有更加良好的替代品（还有我的技术也进步了），最终在2023年2月完全在个人静态博客上移除Netlify CMS系统并把个人静态博客主体转移至Vercel。 优势 自带*.netlify.app的二级域名，且截止至2023年2月，国内可正常访问此二级域名（但不推荐依赖此域名建立站点，此域名适合演示用） 网络解析速度很快，比起Vercel来说，移动宽带对其响应更快（40~70ms左右） 支持大量静态博客框架与插件（没Vercel多），但兼容性似乎比Vercel要差，且缺少部分静态框架预制构建指令模板 官方支持CMS，新手站长写作更加方便快捷 可从GitHub与Gitlab一键导入项目 免费版套餐拥有每月100GB访问流量 免费版套餐拥有每月300分钟的构建时间，对一般个人博客来说够用了 可自定义域名且可为其自动生成与续期免费SSL证书 拥有站点强制https的选项，可以解决一些静态资源兼容性问题 支持的站点自定义设置选项比Vercel要多 可以使用CLI上传构建代码 劣势 参考Vercel，不敢保证其解析稳定性，且其自定义域名依赖其*.netlify.app域名Cname解析，所以不敢保证一旦被墙官方是否愿意出来解决问题 站点全英文且翻译站点会导致站点崩溃，所以不能使用翻译查看管理后台，需要有一定英文基础。 国内网络访问Netlify比较迷，虽然目前看访问正常。 推荐指数4.6分，目前域名没被墙而且速度不错，构建对新手也还不错 Render此条更新时间2023年2月22日 个人观点Render是我最近发现的一个宝藏级别的平台，拥有每月100GB的访问流量，针对静态的构建时间每月也有500分钟左右，托管几个静态站点，完全够用，就是这玩意太冷门了，而且名字也是比较常见的关键词”Render“渲染，所以搜索引擎都搜不出来可还行（单击此条目标题可跳转到Render），在上面构建hexo时请注意把构建命令换成“yarn build” 优势 服务器总体速度比较均衡，相对来说静态站点速度还是可以的 每月100GB访问流量足以满足小站点需求 拥有 *.onrender.com的免费二级域名，但不推荐作常用域名 可以自定义绑定域名并且自动生成SSL证书 免费版每月500分钟免费构建时间 劣势 出现其实没几年，不确定稳定性 推荐指数4.5分，访问速度比较稳当，构建时间也不短 Cloudflare Pages此条更新时间2023年2月22日 个人观点严格意义上，这不算一个静态页面托管平台，Pages服务是Cloudflare针对免费版套餐的一个附属服务，但毕竟Cloudflare在国内的网络状态有目共睹，感觉访问速度甚至不如GitHub Page在国内的速度 优势 貌似不限制流量，但限制每日100000次调用（感觉我是不是数错了0） 建站点还送CDN，国内反向加速祝您博客畅游互联网（Doge） 一键绑定已在Cloudflare设置解析的域名（也似乎只能绑定在那里解析的） 可以享受到所有Cloudflare特性（祝您网站中国红！） 劣势 最大的劣势都写在优势里了（确信） 构建命令只能用一行，所以在上面构建HTML以外的站点会很麻烦（最新版修正了命令缺陷） 推荐指数3.5分，真不咋地，就算网络环境好了也是那样 Bitbucket Pages此条更新时间2023年2月22日 个人观点这个我没用过（不过注册过Bitbucket的账号），不过据说也还算是能用，自带*.bitbucket.io的二级域名 优势 据说Bitbucket的仓库版本管理不错 自带*.bitbucket.io的二级域名，且自带证书（貌似被墙了？） 劣势 无法自定义域名（好像没什么用了） 只能通过https协议访问站点（http会被强制跳转至https，且无法配置） 所有项目的静态网站代码都只能放在专门的站点仓库里（AccountName.bitbucket.io），不能像 GitHub 那样可以在每个项目里用 gh-pages 分支保存文件 百度不收录（被墙了收录啥？） 推荐指数1.8分，墙+本身就一般，网站面向国内不推荐使用 云Paas平台Zeabur个人观点国内团队运营的项目，使用谷歌云，在大陆访问效果还不错，也有免费套餐 后言本文章会不定时不断更新，如果你有推荐主机或其他资源，可留言在评论区","tags":["建站","CDN"],"categories":["建站资源"]},{"title":"国内外域名购买个人观点","path":"/posts/2a6c12b4.html","content":"前言本来觉得不用写这个的，毕竟有比价网站在，可是每天看着一堆人买了一堆乱七八糟还不符合自己心意，而且买了还发现别的地方买自己这个域名会更便宜后悔的也大有人在，也有买了域名还被封的，我也买过一些域名，故整理一些个人观点供看到这篇文章的人参考下。 结合个人文章《两个域名比价网站推荐》食用效果更佳（自卖自销） 需求多数人买域名的需求是为了能够让自己的站点在互联网上能更加显眼（比方说使搜索引擎收录，好记的前缀名字等等），也有一部分单纯为了有个标记（便宜）而买（买6位数字xyz的那些人），结合个人需求购买域名是很重要的，毕竟我们买的就是称心如意。 国内的域名提供商国内的域名提供商感觉十分的稀缺一般，但是它们都有一个特点，那就是首年价格很多看起来都很亲民一般，吸引着你去购买，而且部分续费甚至比国际域名提供商还要低（阿里云top域名典型，29元&#x2F;年），不过有得肯定是必有失的，从国内购买域名，你需要面对的一些事情（个人没有从国内购买过域名，下方部分特点来自网络评论，仅供参考） 网络内容监管：有一家网站使用了国内购买的域名＋美国VPS建立了一个博客站点，分享了一篇有关科学上网的文章，结果被域名提供商检测到并勒令其删除，否则将停用其域名解析，现在这家博客已转移域名到其他提供商去了 续费价格反转：这个倾向于部分小一点的域名提供商，国内比较大的那些相对来说会在域名购买时标注明白续费价格，有部分国内域名提供商购买域名时针对新用户的报价较低，但当一年过去，用户想要续费时发现价格意外性的上涨离谱） 身份信息递交：基本上所有的国内域名提供商购买域名时都需要实名认证且需要年满18岁，无非分严与不严，相对来说，这也是一种保护中国互联网的手段，我个人不是十分反对这样做，有信息在域名提供商那里，只要一般它不泄密，你也能好好做网站，不至于做一些违法乱纪的事情。看个人需求啦，比方说未成年站长就没法通过这一关了 隐私保护缺失：这个倾向于国内一些小的提供商，他们域名的Whois隐私保护功能是收费的，国内较大的域名提供商一般都自带免费的域名Whois隐私保护了。域名Whois像域名的“身份证”，没有隐私保护的情况下，可以通过网络查到其相关信息，包括了域名何时购入，何时过期、购买域名的所有人信息等等。而Whois隐私保护就是保护那部分域名所有人信息，本身国内递交域名Whois信息就必须属实，如果说再不带隐私保护（点名表扬cn域名），基本你的所有信息就完全暴露在互联网上了，而花钱购买隐私保护又有些小贵（很多小提供商的隐私服务是10～20元一年，基本能占据域名标准续费的一半费用），所以如果说一定要在国内购买域名，请选择较大的域名提供商，除部分域名以外，基本都有隐私保护。 我已经买入了国内域名，后悔了怎么办？这个还是可以补救的，毕竟域名是可以转移域名提供商的，有点像国内的携号转网（但比携号转网容易些），所以我们可以通过转移域名提供商的方式来解决问题。 转移时需要注意的事情： 注意转移域名价格：部分国外域名提供商转入域名价格甚至比续费还要贵（大部分国外域名提供商转入费用都是跟域名续费价格一致，因为转入后会自动续费一年），这种时候，推荐你使用我上文《两个域名比价网站推荐》中提到的第二家域名比价网站输入个人域名的顶级域，进行转入费用评估。 转移域名需要时间：大部分域名转移的时间都需要3~5天左右（其实一般一到三天就能解决问题，可问题是一到三天是国外互转），在域名转移期间将无法修改域名DNS解析（所以先配置好解析再去考虑转移），这点还是要注意的，一定要确保这三到五天内域名后方主机是能稳定的提供线路的，不然闭站3天基本搜索引擎权重与收录也没的差不多了，就有点得不偿失了。 转移后支付方式改变：国内域名多使用支付宝与微信进行支付，但到了国外，多见信用卡或者PayPal支付，少部分支持支付宝，但基本没有支持微信支付的。所以要注意转移后个人有对应的支付方式（这点基本困扰大部分未成年站长，但其实未成年站长也很难买国内域名？） 那有没有合适的国外域名转入商推荐？有的，而且不止一家，我在这里提及几家 Namesilo：这家最大的好处在于便宜，而且支持支付宝支付（支付宝在支付美元时会按汇率自动转为需付的人民币），且声誉一向不错，域名续费基本不乱涨价，支持免费的Whois隐私保护，需要注意的是站点的人机验证问题，站点本身国内访问不算很慢，但到了需要鉴定人机的时候基本你就会看它一直转（移动网络尤甚），如果实在卡死可以手动科学上网来缓解下，同时站点后台新旧混用，导致管理跳转时比较麻烦，而且没有对手机做UI适配是一件很不爽的事情，全英文界面，没有中文。 PorkBun：这家也很便宜，同时也支持支付宝支付，而且部分域名续费可能比Namesilo还便宜？（基本还是Namesilo的价格略胜一筹，Ns真的便宜啊！），这家也支持免费的Whois隐私保护，管理后台比Namesilo友好一些（最起码没有新旧混用），也没有十分难受的人机验证，全英文界面，没有中文。 Sav：Sav针对部分域名价格是真的低（2.99美元一年你敢信？），但作为近些年才出现的提供商，而且网络风评很一般，支付方式上仅支持信用卡或PayPal支付，感觉水比较深，个人没有尝试过。 国外有没有购入便宜的域名？有的，基本上面那三家都很便宜，而且Namesilo与Porkbun（猪肉包）都有针对新用户的优惠价，且Porkbun与TrueName携手合作，找到优惠码甚至部分域名首年购买免费（只能用信用卡了） 一只鬆是怎么购买的呢？这个吧，我是全部国外域名提供商，之前从Namesilo 0.99美元入手了首年Top域名，但后来发现Porkbun有更符合个人需求的Icu域名，所以1.88美元入手了Takagi.icu域名（高木同学天下第一！），目前准备转到Namesilo（续费比猪肉包便宜）","tags":["域名"],"categories":["建站思路"]},{"title":"国内外免费域名DNS解析个人推荐","path":"/posts/f6c1ba93.html","content":"前言域名解析这个东西，一般来说，我们购买域名后，大部分域名提供商会提供一个免费DNS解析。例如阿里云DNS，腾讯云Dnspod等等，但相对来说，大部分提供商给的DNS解析不算最优解，甚至存在一些不稳定因素。我在建站上也摸爬滚打了颇久，各种各样的DNS解析服务也用过不少，所以我在这里写一下我自己有关DNS解析选择的观点，仅供参考，但确实算真实使用体验。 按需选择相对来说，不同地区的主机在解析上存在不同的选择（以下介绍均为免费版套餐），选对一个符合你主机情况的解析是对你网站的访客很有帮助的。 如果你的主机在国外Cloudflare“Cloudflare“，一个让诸多站长向往的（白嫖之地）DNS解析服务提供商。目前个人域名 takagi.icu）也是通过此DNS解析。（目前takagi.icu与个人新域名sotkg.cn都使用青云DNS）Cloudflare虽然在国内素有“减速云”之称（SaaS解析法除外），但其实一般你不开它的CDN，国内解析速度还是可以的，其配套服务也让很多站长心动，例如Worker，Page，自带DDos防御（需要开启反向加速CDN），域名重定向与访客规则，免费的通配符SSL证书，都是一个对于新手站长来看，很不错的选择。 Cloudflare解析优势： 支持CDN加速（国内减速） 自带DDos防御服务（I’m Under Atteck！确信） 支持解析 A、AAAA、CNAME、MX、LOC、SRV、SPF、TXT、NS、CAA、PTR、CERT、DNSKEY、DS、NAPTR、SMIMEA、SSHFP、TLSA、URI 支持DNSSEC（高深莫测） 免费版支持一部分其他地方收费的配套服务，例如Worker，Page，访客规则 管理后台基本完全支持中文（泪目） Cloudflare解析劣势： 国内反向CDN加速（免费版解析使用国际节点，开Pro版一般就可以实现平衡？） 本身存在滥用现象（所以存在阻断与污染），导致其服务在国内使用状况不稳定（有时候管理后台都上不去） He.net DNS这家DNS解析最大的好处是贯彻了苏联精神“简单就是美”简洁，快速，稳定。作为世界最大的骨干网参与建设者，He.net提供的免费DNS解析服务相当稳定，在国内虽然不算很快，但绝对能做到稳定。在换用Cloudflare之前，我一直在用 He.net DNS，国内解析速度真的挺稳当的，如果你不喜Cloudflare，这个也是一个不错的选择。 He.net DNS优势： 稳如一匹老狗，十分稳定，国内访问比较稳定 支持解析A、AAAA、CNAME、MX、NS、TXT、CAA、AFSDB、HINFO、RP、LOC、NAPTR、PTR、SSHFP、SPF、SRV（除了DNSSEC基本都支持） 支持SlaveDNS，即备用DNS，让你的DNS解析“高枕无忧”（没用过，不会用QAQ） 提供了免费DDNS（动态域名解析）和IPv6 地址接入服务（没用过，但我大受震撼） TTL最低可设置为5分钟（300） He.net DNS劣势： 上古界面的管理后台（所以手机没有适配） 全英文管理后台（其实也不算很难） 如果你的主机在国内这里说的意思是你的主机在国内，而且主要面对国内访客，如果主机在国内还想用免费解析的情况下对国外访客提供不错的支持（那买国内主机干嘛），还是不如去用国际DNS解析（确信） 首先你要知道的 大部分国内DNS解析都需要你的域名有备案 部分国内DNS解析跟域名服务捆绑（点名表扬阿里云） 免费的一般都比较一般 Dnspod（腾讯云）相对来说，腾讯云还算良心，在收购了帝思普后，向用户提供免费的DNS解析服务，国内速度还是不错的，解析上也确实还行，我刚开始建站的时候，就是使用Dnspod做解析的，但是后来因为不知为什么，当时的解析突然炸了（似乎是因为全国外主机解析？）全部访问直接阻断，总之感觉这个对国外主机解析不大友好，遂更换为He.net DNS，看个人喜好吧，域名备案的比较推荐去用。 Dnspod的优势： 国内三网优化解析，教育网优化与搜索引擎优化 安全（非常安全啊，改一条小小的参数都需要手机微信小程序授权一次） 全中文全UA优化，国内用户友好，新手小白友好，手机用户友好 相比国内其他DNS解析，免费中算良心的一家 免费的网站D监控，并可短信或邮件推送用户网站工作情况（免费探针罢了） 智能线路切换？（说白了就是用户设定好，一条不通走另一条，都不通的话就寄了） 三网分线路解析（可针对移动用户设定一条线路，联通用户走一条线路等等） Dnspod的劣势： 谷歌爬取存在问题（谷歌站点爬虫会爬不到或者错误） 免费套餐虽然不错，不过相对国际上的肯定不够看（不错了其实） 阿里云DNS没用过，毕竟是捆绑阿里云注册域名的，也就是说你首先得去阿里云购买域名才能免费用，而且目测感觉一般，声誉也一般，相对上面的Dnspod感觉不够看。 阿里云DNS的优势： 国内三网优化解析，教育网优化与搜索引擎优化 国内解析国内肯定快（确信） 阿里云DNS的劣势： 免费套餐比起dnspod一般般 华为云DNS也没用过，毕竟前面的已经满足我需求了，虽然华为云的看着比Dnspod好一点 青云DNS个人目前面向国内的域名目前就是使用青云DNS的，相对国内其他几家DNS解析服务商来说，其存在一些优势，包括国内外解析速度都不错，以及多线路优化，免费版就可以选择地区线路优化，还是不错的 青云DNS的优势： 国内三网优化解析，教育网优化与搜索引擎优化，谷歌搜索引擎优化 免费套餐就可选国内地区线路优化，且TTL可选60秒 UI界面简洁明练，简单上手快速配置 青云DNS的劣势： 也就只有免费套餐，你想有其他的也没有（Doge） 支持协议不算很多，URL跳转不管显性还是隐性都需要备案才能用 总之，解析还是要按需来，免费的DNS解析肯定不能做到尽善尽美（所以我们要氪金买Pro），相信你看了上面的内容后，应该会有亿点思路吧。","tags":["DNS"],"categories":["建站资源"]},{"title":"两个域名比价网站推荐","path":"/posts/e95ee125.html","content":"相信平常大家获取域名的时候总是这域名不行那域名不行，要不就输入想要的发现已经被占用了，要不就是买下域名后发现其他网站是买下域名便宜，续费也便宜，可以说追悔莫及，今天我会向你推荐两个比价网站，让你买域名不做那个大怨种，买的放心，用的安心。 一、NameBeta（链接：https://namebeta.com） 优势： 1.网站支持中文，国内用户使用方便 2.网站支持多种域名后辍搜索，包括一些小众冷门后辍 3.支持域名联想，例如查询 carai，会自动联想 car.ai 这类小众域名 4.下拉框内会先调用缓存结果显示注册状态，所以查询速度非常快 5.以一个简洁明了的页面显示各域名提供商的大致价格与续费 6.抓取了国内域名提供商，国内用户也可快速跳转购买（例如腾讯云Dnspod，阿里云万网等） 劣势： 1.没有溢价抓取，部分被域名提供商标注为特殊价格的域名不会提示，且部分域名价格不符合上方标注（应该只是抓取了这个域名的在这个注册商的大致价格） 二、Tld-List域名比价网站（链接：https://zh-hans.tld-list.com） 优势： 1.网站支持中文，国内用户使用方便 2.非常全，基本你能想到的所有注册商可注册的顶级域名全在这里了 3.搜索选项多，提供了多元素的多种搜索方式，可以分类筛选出你心仪的注册商与域名 4.溢价提示与支付方式提示，网站会用一个星状符号提示你此域名可能存在溢价，同时在域名注册商选择界面会显示注册商支持的支付方式与信息，相当人性化 5.最优解提示，网站会显示获取此域名最便宜的注册方式与最便宜的续费方式 6.货币本地化，网站可以自选显示货币的种类，选择人民币会自动按照美元汇率转换为人民币并显示 劣势： 1.没有域名联想，不能像Namebeta一样自动联想域名","tags":["建站","域名"],"categories":["建站资源"]},{"title":"VistaPanel面板主机使用Cname解析域名并使用Cf免费CDN与SSL","path":"/posts/2b0c38fa.html","content":"之前曾经嫖过一台使用VistaPanel主机面板的主机，最近打算给它绑定一个域名来建个站用，因为我域名解析服务用的Cloudflare，就想要给它套个Cf提供的免费CDN来让网站访问速度稳定 （主机提供商的域名解析在国内存在部分超时，速度不稳定与慢的问题），同时也想使用Cf提供的通配符免费SSL证书，但是这些都要先使用Cf的CDN加速才可以实现，而面板提供的还是Ns地址，是不能套用Cf Cdn加速的，同时Ns地址也对解析设置不友好（例如域名生效速度慢），所以综合研究了下知道了怎么通过Cname绑定域名，下面是教程 1.首先登录VistaPanel面板后台，并且打开停放域设置，如图所示 1 2.接下来按照面板提供的Ns地址，先去域名DNS解析那里为你想要绑定的域名设置Ns解析（这一步是为了让面板绑定你想绑定的域名，使用Cname个人测试无法直接绑定域名） 3.等待DNS解析生效后，把域名输入到上方输入框，单击面板“添加托管域”，如果出现绿色界面完成则为绑定成功。 4.接下来把域名DNS解析那里的Ns解析记录删除，然后设定Cname解析地址为你面板免费赠送的二级域名（获取服务器IP）。 5.等待解析生效即可。 进阶（使用Cloudflare Cdn加速域名并使用其免费SSL证书） 首先你要先有一个解析绑定在Cloudflare的域名，并且Cf为他生成了通配符证书，虽然很多人都说国内使用Cf Cdn会造成反向加速，但服务器在国外且在国内访问线路不稳定的套上Cf Cdn起码是可以实现访问稳定的，而且如果你的源服务器网络线路在国内够垃圾（比如像免费主机这种），套上不一定会反向加速（比方说免费主机标准在国内网络测试延时约260ms~400ms，套上Cf Cdn后测试反而能到150ms~250ms左右） 那么按照前边设定好了域名解析的话，Cf的Cname解析是可以开启CDN的，但这时我们不能开启，现在开了反而会导致网页访问出现问题，首先我们要去给免费主机上一个SSL证书（任何证书均可，自签名也可以） 这里推荐一个自签名证书生成地址： https://www.ssleye.com/ssltool/self_sign.htmlhttps://www.ssleye.com/ssltool/self_sign.html 生成好自签名证书后，去主机面板SSL设置里给你绑定的域名绑定好证书 然后在Cf解析面板SSL设置那里，把模式调至“完全”，但不能开到最高的“严格” 2 然后这时我们就可以打开Cf域名解析那里的CDN加速了，打开后等待一段时间CDN生效后访问界面即可看到已经是CF提供的免费通配符SSL了","tags":["面板","SSL"],"categories":["建站实践"]},{"title":"Vercel托管服务绑定域名打不开页面解决方案","path":"/posts/88b12552.html","content":"我曾经在Vercel上托管页面的时候，发现绑定域名后中国大陆境内打不开域名项目，去查了一下，原因是众所周知的 Ps：好用而且免费的东西还是没逃过这个结局，跟vercel.app这个域名在中国大陆地区的死法一样 官方解决方案： 将 A 记录从 76.76.21.21 改成 76.223.126.88 将 CNAME 记录从 cname.vercel-dns.com 修改为 cname-china.vercel-dns.com 在你的域名解析服务那里修改就可以了 但是吧，虽然大家教程都是这么写的，可是我个人使用是有时候站点一段时间内恢复正常了，但过一会儿还是出问题了，依旧提示被重置链接 个人解决方案： 在Vercel的 “Domain” 域名管理处，把对应域名的解析记录也改成跟上方一样的即可（没有出现此问题就没必要这样）","tags":["建站"],"categories":["建站思路"]},{"title":"关于","path":"/about/index.html","content":"关于我Hi~，这里是一只鬆。 有关这个网名：这个名字来历是我的几个学弟们给我起的（懈，鎏？），当时觉得挺好玩的，“一只鬆”这个网名曾让我父母不满意，其实我觉得还好啦，但是还是默默的给个人微信（我微信很清闲，一般就是跟父母和几个同学联系用的）换上了自己的姓氏网名（惹不起） 自介：我嘛，目前是一名来自山东的高三在读学生，喜欢研究琢磨各种我所感兴趣的事情，偶尔也想做自己喜欢的事情：看看番剧，做做网站。 关于我 身体比较一般（例如185的个子却只有60公斤😓 ，然而我一顿饭吃的却是三个人的量，狂吃不胖ing），所以对除了跑步与打羽毛球以外的运动不大喜欢。 有点懒（不是起床气），希望事情尽量能做到一劳永逸（然而总是事和愿违）（就比方说三换博客这件事，甚至一度想一次性买几年域名来省去域名续费的麻烦，然而受限于资金QAQ） 认真投入（限定于感兴趣的事），深度投入到个人喜欢的事情，对于感兴趣的事情愿意不吃不喝为之连续投入😋 。当然，一般不是玩的事情（确信）。 演讲恐惧症：我不要演讲啊啊啊啊！ 喜欢山楂制品，包括山楂，不管生的熟的或者酸的甜的，全部通吃。 在干嘛 研究建站，并且有了些成就？（Maybe） 高木同学天下第一（混入） 学习呗？（学生不学习干嘛？） 氯化氢＆HclCloud（好长QAQ）建立者个人目前主要维护（包括参与维护）站点： 高木同学资料站 联系我 QQ：2319665062（个人QQ邮箱同号） 个人邮箱：&#x79;&#122;&#115;&#x6f;&#110;&#103;&#x30;&#x36;&#x40;&#111;&#117;&#x74;&#x6c;&#x6f;&#111;&#x6b;&#46;&#99;&#111;&#109; 擅长捉弄的高木同学QQ频道（首先，你得也是个高木厨）"},{"title":"友情链接","path":"/friends/index.html","content":"想和我交朋友嘛，发送电子邮件至 : yzsong06@outlook.com 或者直接在友链页面评论区留下站点信息 友人帐朋友圈安知鱼南栀SpaceJack's Blog糖の小站牧丰的静安小站Decher的博客陈郑逸领域柠檬博客Wfh132博客晓空blogiMaeGoo's Blog博客录X.G孤梦Pdone's Blog萌言网土豆沙锅锅の小碎记Ice Year の位面Sotkg BlogRavelloH's Blog懋和道人 let UserConfig = { // 填写你的api地址 private_api_url: 'https://fcircle.sotkg.cn', // 初始加载几篇文章 page_init_number: 20, // 点击加载更多时，一次最多加载几篇文章，默认10 page_turning_number: 10, // 头像加载失败时，默认头像地址 error_img: 'https://sdn.geekzu.org/avatar/57d8260dfb55501c37dde588e7c3852c', // 进入页面时第一次的排序规则 sort_rule: 'created', // 本地文章缓存数据过期时间（天） expire_days: 1, } 友链格式：站点名称，站点链接（支持https），站点描述（一句话），头像图片Url链接 欢迎踊跃交换友链！本站对友链有一点点的小要求 友链要求站点支持https，且在中国大陆冷启动不超过10s站点内容不违反中国大陆地区法律仅限博客或个人主页类站点申请友链，其他站点申请将不予通过请先把本博客信息（参考下方）添加至您的站点友链页面后再向本站申请友链 123456789101112本站友链引用相关：站点名称: 一只鬆の小站站点链接: https://blog.sotkg.cn站点描述: 心有多宽，世界就有多远--以下为可选头像链接源（稳定性从上至下排列）--Cravatar（中国大陆）：https://cravatar.cn/avatar/7a54b931dd7608d9b17b5625c31ed000?s=512&amp;d=wavatar&amp;r=gLoliNet（全球）: https://s2.loli.net/2023/02/20/q7Zhwm35QIGt6XA.jpgGravatar（海外）：https://0.gravatar.com/avatar/36e3924dedc66a1e19e601b66bee409ebdeff13f2fb503726102815469715a76?s=400&amp;d=mmWebP压缩（全球）: https://gravatar.webp.se/avatar/36e3924dedc66a1e19e601b66bee409ebdeff13f2fb503726102815469715a76?s=400&amp;d=mmGeekZu（中国大陆）:https://sdn.geekzu.org/avatar/36e3924dedc66a1e19e601b66bee409ebdeff13f2fb503726102815469715a76?s=400&amp;d=mm 按需取用即可，国内网站建议Cravatar，Gravatar官方源仅限面对海外站点，国内无法使用大概就是这样，站点描述圈内熟人可以按需自己修改"},{"path":"/images/index.html","content":"个人静态博客 body { font-family: \"衬线体\", serif; text-align: center; } .avatar { margin-top: 50px; } .description { margin-bottom: 50px; } .btn { padding: 12px 24px; background-color: #007bff; color: #fff; text-decoration: none; border-radius: 4px; } 如果站点上方的头像图片能够正确被显示，代表此加速源工作正常。 此加速源为一只鬆的个人静态博客提供存储图片加速服务。 访问个人博客"},{"title":"赞助","path":"/pay/index.html","content":"微信赞赏码"}]